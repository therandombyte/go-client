// Package vra8 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package vra8

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// OpenID Connect discovery endpoint
	// (GET /.well-known/openid-configuration)
	GetOpenidConfiguration(ctx echo.Context) error
	// Exchange organization scoped API-token for user access token.
	// (POST /csp/gateway/am/api/auth/api-tokens/authorize)
	GetAccessTokenWithRefreshToken(ctx echo.Context) error
	// Get an access token.
	// (POST /csp/gateway/am/api/auth/authorize)
	GetAccessTokenWithAuthorizationRequest(ctx echo.Context, params GetAccessTokenWithAuthorizationRequestParams) error
	// Defines the public keys used to verify the authenticity of the JWT token.
	// (GET /csp/gateway/am/api/auth/keys)
	GetKeys(ctx echo.Context) error
	// Performs logout.
	// (POST /csp/gateway/am/api/auth/logout)
	Logout(ctx echo.Context, params LogoutParams) error
	// Exchanges one of the following grants: authorization_code, refresh_token, client_credentials or client_delegate for access token.
	// (POST /csp/gateway/am/api/auth/token)
	GetAccessTokenPkceFlow(ctx echo.Context, params GetAccessTokenPkceFlowParams) error
	// Returns the public key.
	// (GET /csp/gateway/am/api/auth/token-public-key)
	GetPublicKey(ctx echo.Context, params GetPublicKeyParams) error
	// Search for a group.
	// (GET /csp/gateway/am/api/groups/search)
	SearchGroups(ctx echo.Context, params SearchGroupsParams) error
	// Get the currently logged in user.
	// (GET /csp/gateway/am/api/loggedin/user)
	GetLoggedInUser(ctx echo.Context, params GetLoggedInUserParams) error
	// Get the currently logged in user's organizations.
	// (GET /csp/gateway/am/api/loggedin/user/default-org)
	GetUserDefaultOrg(ctx echo.Context) error
	// Get the currently logged in user's detailed information.
	// (GET /csp/gateway/am/api/loggedin/user/details)
	GetLoggedInUserDetails(ctx echo.Context) error
	// Get the currently logged in user's organizations.
	// (GET /csp/gateway/am/api/loggedin/user/orgs)
	GetUserOrgs1(ctx echo.Context, params GetUserOrgs1Params) error
	// Get Principal User Groups Information Within the Specified Organization
	// (GET /csp/gateway/am/api/loggedin/user/orgs/{orgId}/groups)
	GetLoggedInUserGroupsOnOrg(ctx echo.Context, orgId string) error
	// Get the currently logged in user's info in an organization.
	// (GET /csp/gateway/am/api/loggedin/user/orgs/{orgId}/info)
	GetUserOrgInfo(ctx echo.Context, orgId string) error
	// Get the currently logged in user's roles.
	// (GET /csp/gateway/am/api/loggedin/user/orgs/{orgId}/roles)
	GetUserOrgRoles(ctx echo.Context, orgId string) error
	// Get the currently logged in user's service roles.
	// (GET /csp/gateway/am/api/loggedin/user/orgs/{orgId}/service-roles)
	GetUserOrgServiceRoles(ctx echo.Context, orgId string, params GetUserOrgServiceRolesParams) error
	// Get the currently logged in user's profile.
	// (GET /csp/gateway/am/api/loggedin/user/profile)
	GetPrincipalUserProfile(ctx echo.Context) error
	// Update the currently logged in user's profile attributes.
	// (PATCH /csp/gateway/am/api/loggedin/user/profile)
	UpdateUserProfile(ctx echo.Context) error
	// Update the currently logged in user's locale preferences.
	// (PUT /csp/gateway/am/api/loggedin/user/profile/locale-preferences)
	UpdateUserPreferences(ctx echo.Context) error
	// Login.
	// (POST /csp/gateway/am/api/login)
	Login(ctx echo.Context, params LoginParams) error
	// Get Access token.
	// (POST /csp/gateway/am/api/login/oauth)
	LoginOauth(ctx echo.Context, params LoginOauthParams) error
	// Read an organization.
	// (GET /csp/gateway/am/api/orgs/{orgId})
	GetById(ctx echo.Context, orgId string) error
	// Update organization details.
	// (PATCH /csp/gateway/am/api/orgs/{orgId})
	PatchOrg(ctx echo.Context, orgId string) error
	// Remove Groups From Organization
	// (DELETE /csp/gateway/am/api/orgs/{orgId}/groups)
	RemoveGroupsFromOrganization(ctx echo.Context, orgId string) error
	// Get Organization Groups
	// (GET /csp/gateway/am/api/orgs/{orgId}/groups)
	GetOrganizationGroups(ctx echo.Context, orgId string, params GetOrganizationGroupsParams) error
	// Find groups.
	// (GET /csp/gateway/am/api/orgs/{orgId}/groups-search)
	SearchOrgGroups(ctx echo.Context, orgId string, params SearchOrgGroupsParams) error
	// Get nested groups from AD group.
	// (GET /csp/gateway/am/api/orgs/{orgId}/groups/{groupId}/groups)
	GetNestedGroupsFromADGroup(ctx echo.Context, orgId string, groupId string, params GetNestedGroupsFromADGroupParams) error
	// Get Group Roles On Organization
	// (GET /csp/gateway/am/api/orgs/{orgId}/groups/{groupId}/roles)
	GetGroupRolesOnOrganization(ctx echo.Context, orgId string, groupId string) error
	// Update Group Roles On Organization
	// (PATCH /csp/gateway/am/api/orgs/{orgId}/groups/{groupId}/roles)
	UpdateGroupRolesOnOrganization(ctx echo.Context, orgId string, groupId string) error
	// Get users in group within organization.
	// (GET /csp/gateway/am/api/orgs/{orgId}/groups/{groupId}/users)
	GetPaginatedGroupUsers(ctx echo.Context, orgId string, groupId string, params GetPaginatedGroupUsersParams) error
	// Deletes an OAuth2 client.
	// (DELETE /csp/gateway/am/api/orgs/{orgId}/oauth-apps)
	DeleteOrgScopedOAuthClient(ctx echo.Context, orgId string) error
	// Create an OAuth2 client.
	// (POST /csp/gateway/am/api/orgs/{orgId}/oauth-apps)
	CreateOrgScopedOAuthClient(ctx echo.Context, orgId string) error
	// Get Organization Managed OAuth App.
	// (GET /csp/gateway/am/api/orgs/{orgId}/oauth-apps/{oauthAppId})
	GetOrgScopedOAuthClient(ctx echo.Context, orgId string, oauthAppId string) error
	// Get Organization Roles
	// (GET /csp/gateway/am/api/orgs/{orgId}/roles)
	GetOrgRoles(ctx echo.Context, orgId string, params GetOrgRolesParams) error
	// Edit roles.
	// (PATCH /csp/gateway/am/api/orgs/{orgId}/roles)
	PatchOrgRoles(ctx echo.Context, orgId string) error
	// Read a role.
	// (GET /csp/gateway/am/api/orgs/{orgId}/roles/{roleId})
	GetRoleByOrgIdAndRoleId(ctx echo.Context, orgId string, roleId string) error
	// Get all organization's sub-orgs.
	// (GET /csp/gateway/am/api/orgs/{orgId}/sub-orgs)
	GetOrgSubOrgs(ctx echo.Context, orgId string) error
	// Paginates search for user.
	// (GET /csp/gateway/am/api/orgs/{orgId}/users)
	GetPaginatedOrgUsersInfo1(ctx echo.Context, orgId string, params GetPaginatedOrgUsersInfo1Params) error
	// Search for users.
	// (GET /csp/gateway/am/api/orgs/{orgId}/users/search)
	SearchUsers(ctx echo.Context, orgId string, params SearchUsersParams) error
	// Display detailed user information compiled from the user access token and the associated ID token.
	// (GET /csp/gateway/am/api/userinfo)
	GetAccessTokenInfo(ctx echo.Context, params GetAccessTokenInfoParams) error
	// Get the user belonging to the current organization.
	// (GET /csp/gateway/am/api/users/{acct})
	GetUserInAnyOrganization1(ctx echo.Context, acct string, params GetUserInAnyOrganization1Params) error
	// Get the user details.
	// (GET /csp/gateway/am/api/users/{acct}/orgs/{orgId}/info)
	GetUserInfoInOrganization1(ctx echo.Context, acct string, orgId string) error
	// Get user roles with groups inheritance information within the specified organization
	// (GET /csp/gateway/am/api/users/{userId}/orgs/{orgId}/access)
	GetUserRolesOnOrgWithGroupInfo(ctx echo.Context, userId string, orgId string) error
	// Get the user's roles.
	// (GET /csp/gateway/am/api/users/{userId}/orgs/{orgId}/roles)
	GetUserRolesInOrganization1(ctx echo.Context, userId string, orgId string) error
	// Edit the user's roles.
	// (PATCH /csp/gateway/am/api/users/{userId}/orgs/{orgId}/roles)
	PatchUserRolesInOrganization(ctx echo.Context, userId string, orgId string) error
	// Get the user's service roles.
	// (GET /csp/gateway/am/api/users/{userId}/orgs/{orgId}/service-roles)
	GetUserServiceRolesInOrganization1(ctx echo.Context, userId string, orgId string, params GetUserServiceRolesInOrganization1Params) error
	// Edit the user's service roles.
	// (PATCH /csp/gateway/am/api/users/{userId}/orgs/{orgId}/service-roles)
	PatchUserServiceRolesInOrganization(ctx echo.Context, userId string, orgId string) error
	// Get the user details.
	// (GET /csp/gateway/am/api/users/{userId}/orgs/{orgId}/short-info)
	GetUserShortInfoInOrganization(ctx echo.Context, userId string, orgId string) error
	// Get the currently logged in user's organizations.
	// (GET /csp/gateway/am/api/v2/loggedin/user/orgs)
	GetUserOrgs(ctx echo.Context, params GetUserOrgsParams) error
	// Paginates search for user.
	// (GET /csp/gateway/am/api/v2/orgs/{orgId}/users)
	GetPaginatedOrgUsersInfo(ctx echo.Context, orgId string, params GetPaginatedOrgUsersInfoParams) error
	// Get the user (by user ID) belonging to the current organization.
	// (GET /csp/gateway/am/api/v2/users/{userId})
	GetUserInAnyOrganization(ctx echo.Context, userId string, params GetUserInAnyOrganizationParams) error
	// Get the user details by user ID and organization ID.
	// (GET /csp/gateway/am/api/v2/users/{userId}/orgs/{orgId}/info)
	GetUserInfoInOrganization(ctx echo.Context, userId string, orgId string) error
	// Get the user's roles for a particular organization.
	// (GET /csp/gateway/am/api/v2/users/{userId}/orgs/{orgId}/roles)
	GetUserRolesInOrganization(ctx echo.Context, userId string, orgId string) error
	// Get the user's roles for a particular organization.
	// (GET /csp/gateway/am/api/v2/users/{userId}/orgs/{orgId}/service-roles)
	GetUserServiceRolesInOrganization(ctx echo.Context, userId string, orgId string, params GetUserServiceRolesInOrganizationParams) error
	// (BETA) Update user roles in organization.
	// (PATCH /csp/gateway/am/api/v3/users/{userId}/orgs/{orgId}/roles)
	PatchUserRolesOnOrganization(ctx echo.Context, userId string, orgId string) error
	// Get all service definitions.
	// (GET /csp/gateway/slc/api/definitions)
	GetAllServiceDefinitions(ctx echo.Context, params GetAllServiceDefinitionsParams) error
	// Deprecated: Get all service definitions the organization has access to.
	// (GET /csp/gateway/slc/api/orgs/{orgId}/services)
	GetAllByOrgServiceDefinitions1(ctx echo.Context, orgId string, params GetAllByOrgServiceDefinitions1Params) error
	// Get organizations with access to specified service.
	// (GET /csp/gateway/slc/api/v2/definitions/{serviceDefinitionId}/orgs)
	GetPagedServiceDefinitionOrgs(ctx echo.Context, serviceDefinitionId string, params GetPagedServiceDefinitionOrgsParams) error
	// Get all service definitions the organization has access to.
	// (GET /csp/gateway/slc/api/v2/orgs/{orgId}/services)
	GetAllByOrgServiceDefinitions(ctx echo.Context, orgId string, params GetAllByOrgServiceDefinitionsParams) error
	// Check ID Token
	// (GET /oauth/check_id_token)
	CheckIDToken(ctx echo.Context, params CheckIDTokenParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetOpenidConfiguration converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenidConfiguration(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOpenidConfiguration(ctx)
	return err
}

// GetAccessTokenWithRefreshToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccessTokenWithRefreshToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccessTokenWithRefreshToken(ctx)
	return err
}

// GetAccessTokenWithAuthorizationRequest converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccessTokenWithAuthorizationRequest(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAccessTokenWithAuthorizationRequestParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authorization: %s", err))
		}

		params.Authorization = &Authorization
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccessTokenWithAuthorizationRequest(ctx, params)
	return err
}

// GetKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetKeys(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetKeys(ctx)
	return err
}

// Logout converts echo context to params.
func (w *ServerInterfaceWrapper) Logout(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params LogoutParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "The access token to be invalidated." -------------
	if valueList, found := headers[http.CanonicalHeaderKey("The access token to be invalidated.")]; found {
		var TheAccessTokenToBeInvalidated string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for The access token to be invalidated., got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "The access token to be invalidated.", valueList[0], &TheAccessTokenToBeInvalidated, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter The access token to be invalidated.: %s", err))
		}

		params.TheAccessTokenToBeInvalidated = &TheAccessTokenToBeInvalidated
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Logout(ctx, params)
	return err
}

// GetAccessTokenPkceFlow converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccessTokenPkceFlow(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAccessTokenPkceFlowParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter authorization is required, but not found"))
	}

	if cookie, err := ctx.Cookie("identity-session"); err == nil {

		var value string
		err = runtime.BindStyledParameterWithOptions("simple", "identity-session", cookie.Value, &value, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationCookie, Explode: true, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identity-session: %s", err))
		}
		params.IdentitySession = &value

	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccessTokenPkceFlow(ctx, params)
	return err
}

// GetPublicKey converts echo context to params.
func (w *ServerInterfaceWrapper) GetPublicKey(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPublicKeyParams
	// ------------- Optional query parameter "The public key format." -------------

	err = runtime.BindQueryParameter("form", true, false, "The public key format.", ctx.QueryParams(), &params.ThePublicKeyFormat)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter The public key format.: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPublicKey(ctx, params)
	return err
}

// SearchGroups converts echo context to params.
func (w *ServerInterfaceWrapper) SearchGroups(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchGroupsParams
	// ------------- Required query parameter "searchTerm" -------------

	err = runtime.BindQueryParameter("form", true, true, "searchTerm", ctx.QueryParams(), &params.SearchTerm)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter searchTerm: %s", err))
	}

	// ------------- Optional query parameter "idpId" -------------

	err = runtime.BindQueryParameter("form", true, false, "idpId", ctx.QueryParams(), &params.IdpId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idpId: %s", err))
	}

	// ------------- Optional query parameter "pageStart" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageStart", ctx.QueryParams(), &params.PageStart)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageStart: %s", err))
	}

	// ------------- Optional query parameter "pageLimit" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageLimit", ctx.QueryParams(), &params.PageLimit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageLimit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchGroups(ctx, params)
	return err
}

// GetLoggedInUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetLoggedInUser(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLoggedInUserParams
	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter expand: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLoggedInUser(ctx, params)
	return err
}

// GetUserDefaultOrg converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserDefaultOrg(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserDefaultOrg(ctx)
	return err
}

// GetLoggedInUserDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetLoggedInUserDetails(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLoggedInUserDetails(ctx)
	return err
}

// GetUserOrgs1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserOrgs1(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserOrgs1Params
	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter expand: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserOrgs1(ctx, params)
	return err
}

// GetLoggedInUserGroupsOnOrg converts echo context to params.
func (w *ServerInterfaceWrapper) GetLoggedInUserGroupsOnOrg(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLoggedInUserGroupsOnOrg(ctx, orgId)
	return err
}

// GetUserOrgInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserOrgInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserOrgInfo(ctx, orgId)
	return err
}

// GetUserOrgRoles converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserOrgRoles(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserOrgRoles(ctx, orgId)
	return err
}

// GetUserOrgServiceRoles converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserOrgServiceRoles(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserOrgServiceRolesParams
	// ------------- Optional query parameter "serviceDefinitionLink" -------------

	err = runtime.BindQueryParameter("form", true, false, "serviceDefinitionLink", ctx.QueryParams(), &params.ServiceDefinitionLink)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceDefinitionLink: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserOrgServiceRoles(ctx, orgId, params)
	return err
}

// GetPrincipalUserProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetPrincipalUserProfile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPrincipalUserProfile(ctx)
	return err
}

// UpdateUserProfile converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUserProfile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUserProfile(ctx)
	return err
}

// UpdateUserPreferences converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUserPreferences(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUserPreferences(ctx)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params LoginParams
	// ------------- Optional query parameter "access_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "access_token", ctx.QueryParams(), &params.AccessToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter access_token: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx, params)
	return err
}

// LoginOauth converts echo context to params.
func (w *ServerInterfaceWrapper) LoginOauth(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params LoginOauthParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authorization: %s", err))
		}

		params.Authorization = &Authorization
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LoginOauth(ctx, params)
	return err
}

// GetById converts echo context to params.
func (w *ServerInterfaceWrapper) GetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetById(ctx, orgId)
	return err
}

// PatchOrg converts echo context to params.
func (w *ServerInterfaceWrapper) PatchOrg(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchOrg(ctx, orgId)
	return err
}

// RemoveGroupsFromOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveGroupsFromOrganization(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RemoveGroupsFromOrganization(ctx, orgId)
	return err
}

// GetOrganizationGroups converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrganizationGroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrganizationGroupsParams
	// ------------- Optional query parameter "pageStart" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageStart", ctx.QueryParams(), &params.PageStart)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageStart: %s", err))
	}

	// ------------- Optional query parameter "pageLimit" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageLimit", ctx.QueryParams(), &params.PageLimit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageLimit: %s", err))
	}

	// ------------- Optional query parameter "groupId" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupId", ctx.QueryParams(), &params.GroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOrganizationGroups(ctx, orgId, params)
	return err
}

// SearchOrgGroups converts echo context to params.
func (w *ServerInterfaceWrapper) SearchOrgGroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchOrgGroupsParams
	// ------------- Required query parameter "groupSearchTerm" -------------

	err = runtime.BindQueryParameter("form", true, true, "groupSearchTerm", ctx.QueryParams(), &params.GroupSearchTerm)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupSearchTerm: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchOrgGroups(ctx, orgId, params)
	return err
}

// GetNestedGroupsFromADGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetNestedGroupsFromADGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", ctx.Param("groupId"), &groupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNestedGroupsFromADGroupParams
	// ------------- Optional query parameter "pageStart" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageStart", ctx.QueryParams(), &params.PageStart)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageStart: %s", err))
	}

	// ------------- Optional query parameter "pageLimit" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageLimit", ctx.QueryParams(), &params.PageLimit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageLimit: %s", err))
	}

	// ------------- Optional query parameter "searchTerm" -------------

	err = runtime.BindQueryParameter("form", true, false, "searchTerm", ctx.QueryParams(), &params.SearchTerm)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter searchTerm: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNestedGroupsFromADGroup(ctx, orgId, groupId, params)
	return err
}

// GetGroupRolesOnOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroupRolesOnOrganization(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", ctx.Param("groupId"), &groupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGroupRolesOnOrganization(ctx, orgId, groupId)
	return err
}

// UpdateGroupRolesOnOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateGroupRolesOnOrganization(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", ctx.Param("groupId"), &groupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateGroupRolesOnOrganization(ctx, orgId, groupId)
	return err
}

// GetPaginatedGroupUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetPaginatedGroupUsers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", ctx.Param("groupId"), &groupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPaginatedGroupUsersParams
	// ------------- Optional query parameter "pageStart" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageStart", ctx.QueryParams(), &params.PageStart)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageStart: %s", err))
	}

	// ------------- Optional query parameter "pageLimit" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageLimit", ctx.QueryParams(), &params.PageLimit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageLimit: %s", err))
	}

	// ------------- Optional query parameter "firstName" -------------

	err = runtime.BindQueryParameter("form", true, false, "firstName", ctx.QueryParams(), &params.FirstName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter firstName: %s", err))
	}

	// ------------- Optional query parameter "lastName" -------------

	err = runtime.BindQueryParameter("form", true, false, "lastName", ctx.QueryParams(), &params.LastName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lastName: %s", err))
	}

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", ctx.QueryParams(), &params.Email)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter email: %s", err))
	}

	// ------------- Optional query parameter "onlyDirectUsers" -------------

	err = runtime.BindQueryParameter("form", true, false, "onlyDirectUsers", ctx.QueryParams(), &params.OnlyDirectUsers)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter onlyDirectUsers: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPaginatedGroupUsers(ctx, orgId, groupId, params)
	return err
}

// DeleteOrgScopedOAuthClient converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteOrgScopedOAuthClient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteOrgScopedOAuthClient(ctx, orgId)
	return err
}

// CreateOrgScopedOAuthClient converts echo context to params.
func (w *ServerInterfaceWrapper) CreateOrgScopedOAuthClient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateOrgScopedOAuthClient(ctx, orgId)
	return err
}

// GetOrgScopedOAuthClient converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrgScopedOAuthClient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	// ------------- Path parameter "oauthAppId" -------------
	var oauthAppId string

	err = runtime.BindStyledParameterWithOptions("simple", "oauthAppId", ctx.Param("oauthAppId"), &oauthAppId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter oauthAppId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOrgScopedOAuthClient(ctx, orgId, oauthAppId)
	return err
}

// GetOrgRoles converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrgRoles(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrgRolesParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter expand: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOrgRoles(ctx, orgId, params)
	return err
}

// PatchOrgRoles converts echo context to params.
func (w *ServerInterfaceWrapper) PatchOrgRoles(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchOrgRoles(ctx, orgId)
	return err
}

// GetRoleByOrgIdAndRoleId converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoleByOrgIdAndRoleId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	// ------------- Path parameter "roleId" -------------
	var roleId string

	err = runtime.BindStyledParameterWithOptions("simple", "roleId", ctx.Param("roleId"), &roleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roleId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRoleByOrgIdAndRoleId(ctx, orgId, roleId)
	return err
}

// GetOrgSubOrgs converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrgSubOrgs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOrgSubOrgs(ctx, orgId)
	return err
}

// GetPaginatedOrgUsersInfo1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetPaginatedOrgUsersInfo1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPaginatedOrgUsersInfo1Params
	// ------------- Optional query parameter "serviceDefinitionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "serviceDefinitionId", ctx.QueryParams(), &params.ServiceDefinitionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceDefinitionId: %s", err))
	}

	// ------------- Optional query parameter "pageStart" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageStart", ctx.QueryParams(), &params.PageStart)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageStart: %s", err))
	}

	// ------------- Optional query parameter "pageLimit" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageLimit", ctx.QueryParams(), &params.PageLimit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageLimit: %s", err))
	}

	// ------------- Optional query parameter "expandProfile" -------------

	err = runtime.BindQueryParameter("form", true, false, "expandProfile", ctx.QueryParams(), &params.ExpandProfile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter expandProfile: %s", err))
	}

	// ------------- Optional query parameter "includeGroupIdsInRoles" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeGroupIdsInRoles", ctx.QueryParams(), &params.IncludeGroupIdsInRoles)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter includeGroupIdsInRoles: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPaginatedOrgUsersInfo1(ctx, orgId, params)
	return err
}

// SearchUsers converts echo context to params.
func (w *ServerInterfaceWrapper) SearchUsers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchUsersParams
	// ------------- Required query parameter "userSearchTerm" -------------

	err = runtime.BindQueryParameter("form", true, true, "userSearchTerm", ctx.QueryParams(), &params.UserSearchTerm)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userSearchTerm: %s", err))
	}

	// ------------- Optional query parameter "expandProfile" -------------

	err = runtime.BindQueryParameter("form", true, false, "expandProfile", ctx.QueryParams(), &params.ExpandProfile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter expandProfile: %s", err))
	}

	// ------------- Optional query parameter "includeGroupIdsInRoles" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeGroupIdsInRoles", ctx.QueryParams(), &params.IncludeGroupIdsInRoles)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter includeGroupIdsInRoles: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchUsers(ctx, orgId, params)
	return err
}

// GetAccessTokenInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccessTokenInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAccessTokenInfoParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccessTokenInfo(ctx, params)
	return err
}

// GetUserInAnyOrganization1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserInAnyOrganization1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "acct" -------------
	var acct string

	err = runtime.BindStyledParameterWithOptions("simple", "acct", ctx.Param("acct"), &acct, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter acct: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserInAnyOrganization1Params
	// ------------- Optional query parameter "expandProfile" -------------

	err = runtime.BindQueryParameter("form", true, false, "expandProfile", ctx.QueryParams(), &params.ExpandProfile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter expandProfile: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserInAnyOrganization1(ctx, acct, params)
	return err
}

// GetUserInfoInOrganization1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserInfoInOrganization1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "acct" -------------
	var acct string

	err = runtime.BindStyledParameterWithOptions("simple", "acct", ctx.Param("acct"), &acct, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter acct: %s", err))
	}

	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserInfoInOrganization1(ctx, acct, orgId)
	return err
}

// GetUserRolesOnOrgWithGroupInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserRolesOnOrgWithGroupInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserRolesOnOrgWithGroupInfo(ctx, userId, orgId)
	return err
}

// GetUserRolesInOrganization1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserRolesInOrganization1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserRolesInOrganization1(ctx, userId, orgId)
	return err
}

// PatchUserRolesInOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUserRolesInOrganization(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchUserRolesInOrganization(ctx, userId, orgId)
	return err
}

// GetUserServiceRolesInOrganization1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserServiceRolesInOrganization1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserServiceRolesInOrganization1Params
	// ------------- Optional query parameter "serviceDefinitionLink" -------------

	err = runtime.BindQueryParameter("form", true, false, "serviceDefinitionLink", ctx.QueryParams(), &params.ServiceDefinitionLink)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceDefinitionLink: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserServiceRolesInOrganization1(ctx, userId, orgId, params)
	return err
}

// PatchUserServiceRolesInOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUserServiceRolesInOrganization(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchUserServiceRolesInOrganization(ctx, userId, orgId)
	return err
}

// GetUserShortInfoInOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserShortInfoInOrganization(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserShortInfoInOrganization(ctx, userId, orgId)
	return err
}

// GetUserOrgs converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserOrgs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserOrgsParams
	// ------------- Optional query parameter "pageStart" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageStart", ctx.QueryParams(), &params.PageStart)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageStart: %s", err))
	}

	// ------------- Optional query parameter "pageLimit" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageLimit", ctx.QueryParams(), &params.PageLimit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageLimit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserOrgs(ctx, params)
	return err
}

// GetPaginatedOrgUsersInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetPaginatedOrgUsersInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPaginatedOrgUsersInfoParams
	// ------------- Optional query parameter "serviceDefinitionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "serviceDefinitionId", ctx.QueryParams(), &params.ServiceDefinitionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceDefinitionId: %s", err))
	}

	// ------------- Optional query parameter "pageStart" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageStart", ctx.QueryParams(), &params.PageStart)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageStart: %s", err))
	}

	// ------------- Optional query parameter "pageLimit" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageLimit", ctx.QueryParams(), &params.PageLimit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageLimit: %s", err))
	}

	// ------------- Optional query parameter "expandProfile" -------------

	err = runtime.BindQueryParameter("form", true, false, "expandProfile", ctx.QueryParams(), &params.ExpandProfile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter expandProfile: %s", err))
	}

	// ------------- Optional query parameter "includeGroupIdsInRoles" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeGroupIdsInRoles", ctx.QueryParams(), &params.IncludeGroupIdsInRoles)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter includeGroupIdsInRoles: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPaginatedOrgUsersInfo(ctx, orgId, params)
	return err
}

// GetUserInAnyOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserInAnyOrganization(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserInAnyOrganizationParams
	// ------------- Optional query parameter "expandProfile" -------------

	err = runtime.BindQueryParameter("form", true, false, "expandProfile", ctx.QueryParams(), &params.ExpandProfile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter expandProfile: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserInAnyOrganization(ctx, userId, params)
	return err
}

// GetUserInfoInOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserInfoInOrganization(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserInfoInOrganization(ctx, userId, orgId)
	return err
}

// GetUserRolesInOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserRolesInOrganization(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserRolesInOrganization(ctx, userId, orgId)
	return err
}

// GetUserServiceRolesInOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserServiceRolesInOrganization(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserServiceRolesInOrganizationParams
	// ------------- Optional query parameter "serviceDefinitionLink" -------------

	err = runtime.BindQueryParameter("form", true, false, "serviceDefinitionLink", ctx.QueryParams(), &params.ServiceDefinitionLink)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceDefinitionLink: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserServiceRolesInOrganization(ctx, userId, orgId, params)
	return err
}

// PatchUserRolesOnOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUserRolesOnOrganization(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchUserRolesOnOrganization(ctx, userId, orgId)
	return err
}

// GetAllServiceDefinitions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllServiceDefinitions(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllServiceDefinitionsParams
	// ------------- Optional query parameter "orgLink" -------------

	err = runtime.BindQueryParameter("form", true, false, "orgLink", ctx.QueryParams(), &params.OrgLink)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgLink: %s", err))
	}

	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter expand: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllServiceDefinitions(ctx, params)
	return err
}

// GetAllByOrgServiceDefinitions1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllByOrgServiceDefinitions1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllByOrgServiceDefinitions1Params
	// ------------- Optional query parameter "excludeUngated" -------------

	err = runtime.BindQueryParameter("form", true, false, "excludeUngated", ctx.QueryParams(), &params.ExcludeUngated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter excludeUngated: %s", err))
	}

	// ------------- Optional query parameter "locale" -------------

	err = runtime.BindQueryParameter("form", true, false, "locale", ctx.QueryParams(), &params.Locale)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter locale: %s", err))
	}

	// ------------- Optional query parameter "pageStart" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageStart", ctx.QueryParams(), &params.PageStart)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageStart: %s", err))
	}

	// ------------- Optional query parameter "pageLimit" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageLimit", ctx.QueryParams(), &params.PageLimit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageLimit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllByOrgServiceDefinitions1(ctx, orgId, params)
	return err
}

// GetPagedServiceDefinitionOrgs converts echo context to params.
func (w *ServerInterfaceWrapper) GetPagedServiceDefinitionOrgs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "serviceDefinitionId" -------------
	var serviceDefinitionId string

	err = runtime.BindStyledParameterWithOptions("simple", "serviceDefinitionId", ctx.Param("serviceDefinitionId"), &serviceDefinitionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceDefinitionId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPagedServiceDefinitionOrgsParams
	// ------------- Optional query parameter "pageStart" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageStart", ctx.QueryParams(), &params.PageStart)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageStart: %s", err))
	}

	// ------------- Optional query parameter "pageLimit" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageLimit", ctx.QueryParams(), &params.PageLimit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageLimit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPagedServiceDefinitionOrgs(ctx, serviceDefinitionId, params)
	return err
}

// GetAllByOrgServiceDefinitions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllByOrgServiceDefinitions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", ctx.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllByOrgServiceDefinitionsParams
	// ------------- Optional query parameter "excludeUngated" -------------

	err = runtime.BindQueryParameter("form", true, false, "excludeUngated", ctx.QueryParams(), &params.ExcludeUngated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter excludeUngated: %s", err))
	}

	// ------------- Optional query parameter "locale" -------------

	err = runtime.BindQueryParameter("form", true, false, "locale", ctx.QueryParams(), &params.Locale)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter locale: %s", err))
	}

	// ------------- Optional query parameter "pageStart" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageStart", ctx.QueryParams(), &params.PageStart)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageStart: %s", err))
	}

	// ------------- Optional query parameter "pageLimit" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageLimit", ctx.QueryParams(), &params.PageLimit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageLimit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllByOrgServiceDefinitions(ctx, orgId, params)
	return err
}

// CheckIDToken converts echo context to params.
func (w *ServerInterfaceWrapper) CheckIDToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CheckIDTokenParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CheckIDToken(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/.well-known/openid-configuration", wrapper.GetOpenidConfiguration)
	router.POST(baseURL+"/csp/gateway/am/api/auth/api-tokens/authorize", wrapper.GetAccessTokenWithRefreshToken)
	router.POST(baseURL+"/csp/gateway/am/api/auth/authorize", wrapper.GetAccessTokenWithAuthorizationRequest)
	router.GET(baseURL+"/csp/gateway/am/api/auth/keys", wrapper.GetKeys)
	router.POST(baseURL+"/csp/gateway/am/api/auth/logout", wrapper.Logout)
	router.POST(baseURL+"/csp/gateway/am/api/auth/token", wrapper.GetAccessTokenPkceFlow)
	router.GET(baseURL+"/csp/gateway/am/api/auth/token-public-key", wrapper.GetPublicKey)
	router.GET(baseURL+"/csp/gateway/am/api/groups/search", wrapper.SearchGroups)
	router.GET(baseURL+"/csp/gateway/am/api/loggedin/user", wrapper.GetLoggedInUser)
	router.GET(baseURL+"/csp/gateway/am/api/loggedin/user/default-org", wrapper.GetUserDefaultOrg)
	router.GET(baseURL+"/csp/gateway/am/api/loggedin/user/details", wrapper.GetLoggedInUserDetails)
	router.GET(baseURL+"/csp/gateway/am/api/loggedin/user/orgs", wrapper.GetUserOrgs1)
	router.GET(baseURL+"/csp/gateway/am/api/loggedin/user/orgs/:orgId/groups", wrapper.GetLoggedInUserGroupsOnOrg)
	router.GET(baseURL+"/csp/gateway/am/api/loggedin/user/orgs/:orgId/info", wrapper.GetUserOrgInfo)
	router.GET(baseURL+"/csp/gateway/am/api/loggedin/user/orgs/:orgId/roles", wrapper.GetUserOrgRoles)
	router.GET(baseURL+"/csp/gateway/am/api/loggedin/user/orgs/:orgId/service-roles", wrapper.GetUserOrgServiceRoles)
	router.GET(baseURL+"/csp/gateway/am/api/loggedin/user/profile", wrapper.GetPrincipalUserProfile)
	router.PATCH(baseURL+"/csp/gateway/am/api/loggedin/user/profile", wrapper.UpdateUserProfile)
	router.PUT(baseURL+"/csp/gateway/am/api/loggedin/user/profile/locale-preferences", wrapper.UpdateUserPreferences)
	router.POST(baseURL+"/csp/gateway/am/api/login", wrapper.Login)
	router.POST(baseURL+"/csp/gateway/am/api/login/oauth", wrapper.LoginOauth)
	router.GET(baseURL+"/csp/gateway/am/api/orgs/:orgId", wrapper.GetById)
	router.PATCH(baseURL+"/csp/gateway/am/api/orgs/:orgId", wrapper.PatchOrg)
	router.DELETE(baseURL+"/csp/gateway/am/api/orgs/:orgId/groups", wrapper.RemoveGroupsFromOrganization)
	router.GET(baseURL+"/csp/gateway/am/api/orgs/:orgId/groups", wrapper.GetOrganizationGroups)
	router.GET(baseURL+"/csp/gateway/am/api/orgs/:orgId/groups-search", wrapper.SearchOrgGroups)
	router.GET(baseURL+"/csp/gateway/am/api/orgs/:orgId/groups/:groupId/groups", wrapper.GetNestedGroupsFromADGroup)
	router.GET(baseURL+"/csp/gateway/am/api/orgs/:orgId/groups/:groupId/roles", wrapper.GetGroupRolesOnOrganization)
	router.PATCH(baseURL+"/csp/gateway/am/api/orgs/:orgId/groups/:groupId/roles", wrapper.UpdateGroupRolesOnOrganization)
	router.GET(baseURL+"/csp/gateway/am/api/orgs/:orgId/groups/:groupId/users", wrapper.GetPaginatedGroupUsers)
	router.DELETE(baseURL+"/csp/gateway/am/api/orgs/:orgId/oauth-apps", wrapper.DeleteOrgScopedOAuthClient)
	router.POST(baseURL+"/csp/gateway/am/api/orgs/:orgId/oauth-apps", wrapper.CreateOrgScopedOAuthClient)
	router.GET(baseURL+"/csp/gateway/am/api/orgs/:orgId/oauth-apps/:oauthAppId", wrapper.GetOrgScopedOAuthClient)
	router.GET(baseURL+"/csp/gateway/am/api/orgs/:orgId/roles", wrapper.GetOrgRoles)
	router.PATCH(baseURL+"/csp/gateway/am/api/orgs/:orgId/roles", wrapper.PatchOrgRoles)
	router.GET(baseURL+"/csp/gateway/am/api/orgs/:orgId/roles/:roleId", wrapper.GetRoleByOrgIdAndRoleId)
	router.GET(baseURL+"/csp/gateway/am/api/orgs/:orgId/sub-orgs", wrapper.GetOrgSubOrgs)
	router.GET(baseURL+"/csp/gateway/am/api/orgs/:orgId/users", wrapper.GetPaginatedOrgUsersInfo1)
	router.GET(baseURL+"/csp/gateway/am/api/orgs/:orgId/users/search", wrapper.SearchUsers)
	router.GET(baseURL+"/csp/gateway/am/api/userinfo", wrapper.GetAccessTokenInfo)
	router.GET(baseURL+"/csp/gateway/am/api/users/:acct", wrapper.GetUserInAnyOrganization1)
	router.GET(baseURL+"/csp/gateway/am/api/users/:acct/orgs/:orgId/info", wrapper.GetUserInfoInOrganization1)
	router.GET(baseURL+"/csp/gateway/am/api/users/:userId/orgs/:orgId/access", wrapper.GetUserRolesOnOrgWithGroupInfo)
	router.GET(baseURL+"/csp/gateway/am/api/users/:userId/orgs/:orgId/roles", wrapper.GetUserRolesInOrganization1)
	router.PATCH(baseURL+"/csp/gateway/am/api/users/:userId/orgs/:orgId/roles", wrapper.PatchUserRolesInOrganization)
	router.GET(baseURL+"/csp/gateway/am/api/users/:userId/orgs/:orgId/service-roles", wrapper.GetUserServiceRolesInOrganization1)
	router.PATCH(baseURL+"/csp/gateway/am/api/users/:userId/orgs/:orgId/service-roles", wrapper.PatchUserServiceRolesInOrganization)
	router.GET(baseURL+"/csp/gateway/am/api/users/:userId/orgs/:orgId/short-info", wrapper.GetUserShortInfoInOrganization)
	router.GET(baseURL+"/csp/gateway/am/api/v2/loggedin/user/orgs", wrapper.GetUserOrgs)
	router.GET(baseURL+"/csp/gateway/am/api/v2/orgs/:orgId/users", wrapper.GetPaginatedOrgUsersInfo)
	router.GET(baseURL+"/csp/gateway/am/api/v2/users/:userId", wrapper.GetUserInAnyOrganization)
	router.GET(baseURL+"/csp/gateway/am/api/v2/users/:userId/orgs/:orgId/info", wrapper.GetUserInfoInOrganization)
	router.GET(baseURL+"/csp/gateway/am/api/v2/users/:userId/orgs/:orgId/roles", wrapper.GetUserRolesInOrganization)
	router.GET(baseURL+"/csp/gateway/am/api/v2/users/:userId/orgs/:orgId/service-roles", wrapper.GetUserServiceRolesInOrganization)
	router.PATCH(baseURL+"/csp/gateway/am/api/v3/users/:userId/orgs/:orgId/roles", wrapper.PatchUserRolesOnOrganization)
	router.GET(baseURL+"/csp/gateway/slc/api/definitions", wrapper.GetAllServiceDefinitions)
	router.GET(baseURL+"/csp/gateway/slc/api/orgs/:orgId/services", wrapper.GetAllByOrgServiceDefinitions1)
	router.GET(baseURL+"/csp/gateway/slc/api/v2/definitions/:serviceDefinitionId/orgs", wrapper.GetPagedServiceDefinitionOrgs)
	router.GET(baseURL+"/csp/gateway/slc/api/v2/orgs/:orgId/services", wrapper.GetAllByOrgServiceDefinitions)
	router.GET(baseURL+"/oauth/check_id_token", wrapper.CheckIDToken)

}
