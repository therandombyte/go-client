// Package vra8 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package vra8

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetOpenidConfiguration request
	GetOpenidConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccessTokenWithRefreshTokenWithBody request with any body
	GetAccessTokenWithRefreshTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetAccessTokenWithRefreshToken(ctx context.Context, body GetAccessTokenWithRefreshTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccessTokenWithAuthorizationRequestWithBody request with any body
	GetAccessTokenWithAuthorizationRequestWithBody(ctx context.Context, params *GetAccessTokenWithAuthorizationRequestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetAccessTokenWithAuthorizationRequest(ctx context.Context, params *GetAccessTokenWithAuthorizationRequestParams, body GetAccessTokenWithAuthorizationRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKeys request
	GetKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogoutWithBody request with any body
	LogoutWithBody(ctx context.Context, params *LogoutParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Logout(ctx context.Context, params *LogoutParams, body LogoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccessTokenPkceFlowWithBody request with any body
	GetAccessTokenPkceFlowWithBody(ctx context.Context, params *GetAccessTokenPkceFlowParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetAccessTokenPkceFlowWithFormdataBody(ctx context.Context, params *GetAccessTokenPkceFlowParams, body GetAccessTokenPkceFlowFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicKey request
	GetPublicKey(ctx context.Context, params *GetPublicKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchGroups request
	SearchGroups(ctx context.Context, params *SearchGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLoggedInUser request
	GetLoggedInUser(ctx context.Context, params *GetLoggedInUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserDefaultOrg request
	GetUserDefaultOrg(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLoggedInUserDetails request
	GetLoggedInUserDetails(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserOrgs1 request
	GetUserOrgs1(ctx context.Context, params *GetUserOrgs1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLoggedInUserGroupsOnOrg request
	GetLoggedInUserGroupsOnOrg(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserOrgInfo request
	GetUserOrgInfo(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserOrgRoles request
	GetUserOrgRoles(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserOrgServiceRoles request
	GetUserOrgServiceRoles(ctx context.Context, orgId string, params *GetUserOrgServiceRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPrincipalUserProfile request
	GetPrincipalUserProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserProfileWithBody request with any body
	UpdateUserProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserProfile(ctx context.Context, body UpdateUserProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserPreferencesWithBody request with any body
	UpdateUserPreferencesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserPreferences(ctx context.Context, body UpdateUserPreferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LoginWithBody request with any body
	LoginWithBody(ctx context.Context, params *LoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Login(ctx context.Context, params *LoginParams, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LoginOauthWithBody request with any body
	LoginOauthWithBody(ctx context.Context, params *LoginOauthParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LoginOauth(ctx context.Context, params *LoginOauthParams, body LoginOauthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetById request
	GetById(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgWithBody request with any body
	PatchOrgWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrg(ctx context.Context, orgId string, body PatchOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveGroupsFromOrganizationWithBody request with any body
	RemoveGroupsFromOrganizationWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveGroupsFromOrganization(ctx context.Context, orgId string, body RemoveGroupsFromOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationGroups request
	GetOrganizationGroups(ctx context.Context, orgId string, params *GetOrganizationGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchOrgGroups request
	SearchOrgGroups(ctx context.Context, orgId string, params *SearchOrgGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNestedGroupsFromADGroup request
	GetNestedGroupsFromADGroup(ctx context.Context, orgId string, groupId string, params *GetNestedGroupsFromADGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupRolesOnOrganization request
	GetGroupRolesOnOrganization(ctx context.Context, orgId string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateGroupRolesOnOrganizationWithBody request with any body
	UpdateGroupRolesOnOrganizationWithBody(ctx context.Context, orgId string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateGroupRolesOnOrganization(ctx context.Context, orgId string, groupId string, body UpdateGroupRolesOnOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPaginatedGroupUsers request
	GetPaginatedGroupUsers(ctx context.Context, orgId string, groupId string, params *GetPaginatedGroupUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgScopedOAuthClientWithBody request with any body
	DeleteOrgScopedOAuthClientWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteOrgScopedOAuthClient(ctx context.Context, orgId string, body DeleteOrgScopedOAuthClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrgScopedOAuthClientWithBody request with any body
	CreateOrgScopedOAuthClientWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrgScopedOAuthClient(ctx context.Context, orgId string, body CreateOrgScopedOAuthClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgScopedOAuthClient request
	GetOrgScopedOAuthClient(ctx context.Context, orgId string, oauthAppId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgRoles request
	GetOrgRoles(ctx context.Context, orgId string, params *GetOrgRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgRolesWithBody request with any body
	PatchOrgRolesWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrgRoles(ctx context.Context, orgId string, body PatchOrgRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRoleByOrgIdAndRoleId request
	GetRoleByOrgIdAndRoleId(ctx context.Context, orgId string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgSubOrgs request
	GetOrgSubOrgs(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPaginatedOrgUsersInfo1 request
	GetPaginatedOrgUsersInfo1(ctx context.Context, orgId string, params *GetPaginatedOrgUsersInfo1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchUsers request
	SearchUsers(ctx context.Context, orgId string, params *SearchUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccessTokenInfo request
	GetAccessTokenInfo(ctx context.Context, params *GetAccessTokenInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserInAnyOrganization1 request
	GetUserInAnyOrganization1(ctx context.Context, acct string, params *GetUserInAnyOrganization1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserInfoInOrganization1 request
	GetUserInfoInOrganization1(ctx context.Context, acct string, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserRolesOnOrgWithGroupInfo request
	GetUserRolesOnOrgWithGroupInfo(ctx context.Context, userId string, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserRolesInOrganization1 request
	GetUserRolesInOrganization1(ctx context.Context, userId string, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchUserRolesInOrganizationWithBody request with any body
	PatchUserRolesInOrganizationWithBody(ctx context.Context, userId string, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchUserRolesInOrganization(ctx context.Context, userId string, orgId string, body PatchUserRolesInOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserServiceRolesInOrganization1 request
	GetUserServiceRolesInOrganization1(ctx context.Context, userId string, orgId string, params *GetUserServiceRolesInOrganization1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchUserServiceRolesInOrganizationWithBody request with any body
	PatchUserServiceRolesInOrganizationWithBody(ctx context.Context, userId string, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchUserServiceRolesInOrganization(ctx context.Context, userId string, orgId string, body PatchUserServiceRolesInOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserShortInfoInOrganization request
	GetUserShortInfoInOrganization(ctx context.Context, userId string, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserOrgs request
	GetUserOrgs(ctx context.Context, params *GetUserOrgsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPaginatedOrgUsersInfo request
	GetPaginatedOrgUsersInfo(ctx context.Context, orgId string, params *GetPaginatedOrgUsersInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserInAnyOrganization request
	GetUserInAnyOrganization(ctx context.Context, userId string, params *GetUserInAnyOrganizationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserInfoInOrganization request
	GetUserInfoInOrganization(ctx context.Context, userId string, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserRolesInOrganization request
	GetUserRolesInOrganization(ctx context.Context, userId string, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserServiceRolesInOrganization request
	GetUserServiceRolesInOrganization(ctx context.Context, userId string, orgId string, params *GetUserServiceRolesInOrganizationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchUserRolesOnOrganizationWithBody request with any body
	PatchUserRolesOnOrganizationWithBody(ctx context.Context, userId string, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchUserRolesOnOrganization(ctx context.Context, userId string, orgId string, body PatchUserRolesOnOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllServiceDefinitions request
	GetAllServiceDefinitions(ctx context.Context, params *GetAllServiceDefinitionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllByOrgServiceDefinitions1 request
	GetAllByOrgServiceDefinitions1(ctx context.Context, orgId string, params *GetAllByOrgServiceDefinitions1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPagedServiceDefinitionOrgs request
	GetPagedServiceDefinitionOrgs(ctx context.Context, serviceDefinitionId string, params *GetPagedServiceDefinitionOrgsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllByOrgServiceDefinitions request
	GetAllByOrgServiceDefinitions(ctx context.Context, orgId string, params *GetAllByOrgServiceDefinitionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CheckIDToken request
	CheckIDToken(ctx context.Context, params *CheckIDTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetOpenidConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpenidConfigurationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccessTokenWithRefreshTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccessTokenWithRefreshTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccessTokenWithRefreshToken(ctx context.Context, body GetAccessTokenWithRefreshTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccessTokenWithRefreshTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccessTokenWithAuthorizationRequestWithBody(ctx context.Context, params *GetAccessTokenWithAuthorizationRequestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccessTokenWithAuthorizationRequestRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccessTokenWithAuthorizationRequest(ctx context.Context, params *GetAccessTokenWithAuthorizationRequestParams, body GetAccessTokenWithAuthorizationRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccessTokenWithAuthorizationRequestRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKeysRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogoutWithBody(ctx context.Context, params *LogoutParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogoutRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Logout(ctx context.Context, params *LogoutParams, body LogoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogoutRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccessTokenPkceFlowWithBody(ctx context.Context, params *GetAccessTokenPkceFlowParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccessTokenPkceFlowRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccessTokenPkceFlowWithFormdataBody(ctx context.Context, params *GetAccessTokenPkceFlowParams, body GetAccessTokenPkceFlowFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccessTokenPkceFlowRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicKey(ctx context.Context, params *GetPublicKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicKeyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchGroups(ctx context.Context, params *SearchGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLoggedInUser(ctx context.Context, params *GetLoggedInUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLoggedInUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserDefaultOrg(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserDefaultOrgRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLoggedInUserDetails(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLoggedInUserDetailsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserOrgs1(ctx context.Context, params *GetUserOrgs1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserOrgs1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLoggedInUserGroupsOnOrg(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLoggedInUserGroupsOnOrgRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserOrgInfo(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserOrgInfoRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserOrgRoles(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserOrgRolesRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserOrgServiceRoles(ctx context.Context, orgId string, params *GetUserOrgServiceRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserOrgServiceRolesRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPrincipalUserProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPrincipalUserProfileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserProfile(ctx context.Context, body UpdateUserProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserPreferencesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserPreferencesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserPreferences(ctx context.Context, body UpdateUserPreferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserPreferencesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginWithBody(ctx context.Context, params *LoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Login(ctx context.Context, params *LoginParams, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginOauthWithBody(ctx context.Context, params *LoginOauthParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginOauthRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginOauth(ctx context.Context, params *LoginOauthParams, body LoginOauthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginOauthRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetById(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetByIdRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrg(ctx context.Context, orgId string, body PatchOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveGroupsFromOrganizationWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveGroupsFromOrganizationRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveGroupsFromOrganization(ctx context.Context, orgId string, body RemoveGroupsFromOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveGroupsFromOrganizationRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationGroups(ctx context.Context, orgId string, params *GetOrganizationGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationGroupsRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchOrgGroups(ctx context.Context, orgId string, params *SearchOrgGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchOrgGroupsRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNestedGroupsFromADGroup(ctx context.Context, orgId string, groupId string, params *GetNestedGroupsFromADGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNestedGroupsFromADGroupRequest(c.Server, orgId, groupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupRolesOnOrganization(ctx context.Context, orgId string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupRolesOnOrganizationRequest(c.Server, orgId, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGroupRolesOnOrganizationWithBody(ctx context.Context, orgId string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGroupRolesOnOrganizationRequestWithBody(c.Server, orgId, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGroupRolesOnOrganization(ctx context.Context, orgId string, groupId string, body UpdateGroupRolesOnOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGroupRolesOnOrganizationRequest(c.Server, orgId, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPaginatedGroupUsers(ctx context.Context, orgId string, groupId string, params *GetPaginatedGroupUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaginatedGroupUsersRequest(c.Server, orgId, groupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgScopedOAuthClientWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgScopedOAuthClientRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgScopedOAuthClient(ctx context.Context, orgId string, body DeleteOrgScopedOAuthClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgScopedOAuthClientRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrgScopedOAuthClientWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrgScopedOAuthClientRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrgScopedOAuthClient(ctx context.Context, orgId string, body CreateOrgScopedOAuthClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrgScopedOAuthClientRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgScopedOAuthClient(ctx context.Context, orgId string, oauthAppId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgScopedOAuthClientRequest(c.Server, orgId, oauthAppId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgRoles(ctx context.Context, orgId string, params *GetOrgRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgRolesRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgRolesWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgRolesRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgRoles(ctx context.Context, orgId string, body PatchOrgRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgRolesRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRoleByOrgIdAndRoleId(ctx context.Context, orgId string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRoleByOrgIdAndRoleIdRequest(c.Server, orgId, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgSubOrgs(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgSubOrgsRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPaginatedOrgUsersInfo1(ctx context.Context, orgId string, params *GetPaginatedOrgUsersInfo1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaginatedOrgUsersInfo1Request(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchUsers(ctx context.Context, orgId string, params *SearchUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchUsersRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccessTokenInfo(ctx context.Context, params *GetAccessTokenInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccessTokenInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserInAnyOrganization1(ctx context.Context, acct string, params *GetUserInAnyOrganization1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserInAnyOrganization1Request(c.Server, acct, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserInfoInOrganization1(ctx context.Context, acct string, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserInfoInOrganization1Request(c.Server, acct, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserRolesOnOrgWithGroupInfo(ctx context.Context, userId string, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRolesOnOrgWithGroupInfoRequest(c.Server, userId, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserRolesInOrganization1(ctx context.Context, userId string, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRolesInOrganization1Request(c.Server, userId, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUserRolesInOrganizationWithBody(ctx context.Context, userId string, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUserRolesInOrganizationRequestWithBody(c.Server, userId, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUserRolesInOrganization(ctx context.Context, userId string, orgId string, body PatchUserRolesInOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUserRolesInOrganizationRequest(c.Server, userId, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserServiceRolesInOrganization1(ctx context.Context, userId string, orgId string, params *GetUserServiceRolesInOrganization1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserServiceRolesInOrganization1Request(c.Server, userId, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUserServiceRolesInOrganizationWithBody(ctx context.Context, userId string, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUserServiceRolesInOrganizationRequestWithBody(c.Server, userId, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUserServiceRolesInOrganization(ctx context.Context, userId string, orgId string, body PatchUserServiceRolesInOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUserServiceRolesInOrganizationRequest(c.Server, userId, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserShortInfoInOrganization(ctx context.Context, userId string, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserShortInfoInOrganizationRequest(c.Server, userId, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserOrgs(ctx context.Context, params *GetUserOrgsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserOrgsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPaginatedOrgUsersInfo(ctx context.Context, orgId string, params *GetPaginatedOrgUsersInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaginatedOrgUsersInfoRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserInAnyOrganization(ctx context.Context, userId string, params *GetUserInAnyOrganizationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserInAnyOrganizationRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserInfoInOrganization(ctx context.Context, userId string, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserInfoInOrganizationRequest(c.Server, userId, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserRolesInOrganization(ctx context.Context, userId string, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRolesInOrganizationRequest(c.Server, userId, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserServiceRolesInOrganization(ctx context.Context, userId string, orgId string, params *GetUserServiceRolesInOrganizationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserServiceRolesInOrganizationRequest(c.Server, userId, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUserRolesOnOrganizationWithBody(ctx context.Context, userId string, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUserRolesOnOrganizationRequestWithBody(c.Server, userId, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUserRolesOnOrganization(ctx context.Context, userId string, orgId string, body PatchUserRolesOnOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUserRolesOnOrganizationRequest(c.Server, userId, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllServiceDefinitions(ctx context.Context, params *GetAllServiceDefinitionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllServiceDefinitionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllByOrgServiceDefinitions1(ctx context.Context, orgId string, params *GetAllByOrgServiceDefinitions1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllByOrgServiceDefinitions1Request(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPagedServiceDefinitionOrgs(ctx context.Context, serviceDefinitionId string, params *GetPagedServiceDefinitionOrgsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPagedServiceDefinitionOrgsRequest(c.Server, serviceDefinitionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllByOrgServiceDefinitions(ctx context.Context, orgId string, params *GetAllByOrgServiceDefinitionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllByOrgServiceDefinitionsRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckIDToken(ctx context.Context, params *CheckIDTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckIDTokenRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetOpenidConfigurationRequest generates requests for GetOpenidConfiguration
func NewGetOpenidConfigurationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/.well-known/openid-configuration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccessTokenWithRefreshTokenRequest calls the generic GetAccessTokenWithRefreshToken builder with application/json body
func NewGetAccessTokenWithRefreshTokenRequest(server string, body GetAccessTokenWithRefreshTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetAccessTokenWithRefreshTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewGetAccessTokenWithRefreshTokenRequestWithBody generates requests for GetAccessTokenWithRefreshToken with any type of body
func NewGetAccessTokenWithRefreshTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/auth/api-tokens/authorize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAccessTokenWithAuthorizationRequestRequest calls the generic GetAccessTokenWithAuthorizationRequest builder with application/json body
func NewGetAccessTokenWithAuthorizationRequestRequest(server string, params *GetAccessTokenWithAuthorizationRequestParams, body GetAccessTokenWithAuthorizationRequestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetAccessTokenWithAuthorizationRequestRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetAccessTokenWithAuthorizationRequestRequestWithBody generates requests for GetAccessTokenWithAuthorizationRequest with any type of body
func NewGetAccessTokenWithAuthorizationRequestRequestWithBody(server string, params *GetAccessTokenWithAuthorizationRequestParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/auth/authorize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Authorization != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam0)
		}

	}

	return req, nil
}

// NewGetKeysRequest generates requests for GetKeys
func NewGetKeysRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/auth/keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogoutRequest calls the generic Logout builder with application/json body
func NewLogoutRequest(server string, params *LogoutParams, body LogoutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLogoutRequestWithBody(server, params, "application/json", bodyReader)
}

// NewLogoutRequestWithBody generates requests for Logout with any type of body
func NewLogoutRequestWithBody(server string, params *LogoutParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/auth/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.TheAccessTokenToBeInvalidated != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "The access token to be invalidated.", runtime.ParamLocationHeader, *params.TheAccessTokenToBeInvalidated)
			if err != nil {
				return nil, err
			}

			req.Header.Set("The access token to be invalidated.", headerParam0)
		}

	}

	return req, nil
}

// NewGetAccessTokenPkceFlowRequestWithFormdataBody calls the generic GetAccessTokenPkceFlow builder with application/x-www-form-urlencoded body
func NewGetAccessTokenPkceFlowRequestWithFormdataBody(server string, params *GetAccessTokenPkceFlowParams, body GetAccessTokenPkceFlowFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGetAccessTokenPkceFlowRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewGetAccessTokenPkceFlowRequestWithBody generates requests for GetAccessTokenPkceFlow with any type of body
func NewGetAccessTokenPkceFlowRequestWithBody(server string, params *GetAccessTokenPkceFlowParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/auth/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authorization", headerParam0)

	}

	if params != nil {

		if params.IdentitySession != nil {
			var cookieParam0 string

			cookieParam0, err = runtime.StyleParamWithLocation("simple", true, "identity-session", runtime.ParamLocationCookie, *params.IdentitySession)
			if err != nil {
				return nil, err
			}

			cookie0 := &http.Cookie{
				Name:  "identity-session",
				Value: cookieParam0,
			}
			req.AddCookie(cookie0)
		}
	}
	return req, nil
}

// NewGetPublicKeyRequest generates requests for GetPublicKey
func NewGetPublicKeyRequest(server string, params *GetPublicKeyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/auth/token-public-key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ThePublicKeyFormat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "The public key format.", runtime.ParamLocationQuery, *params.ThePublicKeyFormat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchGroupsRequest generates requests for SearchGroups
func NewSearchGroupsRequest(server string, params *SearchGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/groups/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "searchTerm", runtime.ParamLocationQuery, params.SearchTerm); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.IdpId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idpId", runtime.ParamLocationQuery, *params.IdpId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageStart", runtime.ParamLocationQuery, *params.PageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageLimit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLoggedInUserRequest generates requests for GetLoggedInUser
func NewGetLoggedInUserRequest(server string, params *GetLoggedInUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/loggedin/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserDefaultOrgRequest generates requests for GetUserDefaultOrg
func NewGetUserDefaultOrgRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/loggedin/user/default-org")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLoggedInUserDetailsRequest generates requests for GetLoggedInUserDetails
func NewGetLoggedInUserDetailsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/loggedin/user/details")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserOrgs1Request generates requests for GetUserOrgs1
func NewGetUserOrgs1Request(server string, params *GetUserOrgs1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/loggedin/user/orgs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLoggedInUserGroupsOnOrgRequest generates requests for GetLoggedInUserGroupsOnOrg
func NewGetLoggedInUserGroupsOnOrgRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/loggedin/user/orgs/%s/groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserOrgInfoRequest generates requests for GetUserOrgInfo
func NewGetUserOrgInfoRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/loggedin/user/orgs/%s/info", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserOrgRolesRequest generates requests for GetUserOrgRoles
func NewGetUserOrgRolesRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/loggedin/user/orgs/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserOrgServiceRolesRequest generates requests for GetUserOrgServiceRoles
func NewGetUserOrgServiceRolesRequest(server string, orgId string, params *GetUserOrgServiceRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/loggedin/user/orgs/%s/service-roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ServiceDefinitionLink != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "serviceDefinitionLink", runtime.ParamLocationQuery, *params.ServiceDefinitionLink); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPrincipalUserProfileRequest generates requests for GetPrincipalUserProfile
func NewGetPrincipalUserProfileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/loggedin/user/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserProfileRequest calls the generic UpdateUserProfile builder with application/json body
func NewUpdateUserProfileRequest(server string, body UpdateUserProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateUserProfileRequestWithBody generates requests for UpdateUserProfile with any type of body
func NewUpdateUserProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/loggedin/user/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateUserPreferencesRequest calls the generic UpdateUserPreferences builder with application/json body
func NewUpdateUserPreferencesRequest(server string, body UpdateUserPreferencesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserPreferencesRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateUserPreferencesRequestWithBody generates requests for UpdateUserPreferences with any type of body
func NewUpdateUserPreferencesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/loggedin/user/profile/locale-preferences")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLoginRequest calls the generic Login builder with application/json body
func NewLoginRequest(server string, params *LoginParams, body LoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginRequestWithBody(server, params, "application/json", bodyReader)
}

// NewLoginRequestWithBody generates requests for Login with any type of body
func NewLoginRequestWithBody(server string, params *LoginParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AccessToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "access_token", runtime.ParamLocationQuery, *params.AccessToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLoginOauthRequest calls the generic LoginOauth builder with application/json body
func NewLoginOauthRequest(server string, params *LoginOauthParams, body LoginOauthJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginOauthRequestWithBody(server, params, "application/json", bodyReader)
}

// NewLoginOauthRequestWithBody generates requests for LoginOauth with any type of body
func NewLoginOauthRequestWithBody(server string, params *LoginOauthParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/login/oauth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Authorization != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam0)
		}

	}

	return req, nil
}

// NewGetByIdRequest generates requests for GetById
func NewGetByIdRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/orgs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOrgRequest calls the generic PatchOrg builder with application/json body
func NewPatchOrgRequest(server string, orgId string, body PatchOrgJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrgRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewPatchOrgRequestWithBody generates requests for PatchOrg with any type of body
func NewPatchOrgRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/orgs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveGroupsFromOrganizationRequest calls the generic RemoveGroupsFromOrganization builder with application/json body
func NewRemoveGroupsFromOrganizationRequest(server string, orgId string, body RemoveGroupsFromOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveGroupsFromOrganizationRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewRemoveGroupsFromOrganizationRequestWithBody generates requests for RemoveGroupsFromOrganization with any type of body
func NewRemoveGroupsFromOrganizationRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/orgs/%s/groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationGroupsRequest generates requests for GetOrganizationGroups
func NewGetOrganizationGroupsRequest(server string, orgId string, params *GetOrganizationGroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/orgs/%s/groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageStart", runtime.ParamLocationQuery, *params.PageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageLimit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "groupId", runtime.ParamLocationQuery, *params.GroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchOrgGroupsRequest generates requests for SearchOrgGroups
func NewSearchOrgGroupsRequest(server string, orgId string, params *SearchOrgGroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/orgs/%s/groups-search", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "groupSearchTerm", runtime.ParamLocationQuery, params.GroupSearchTerm); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNestedGroupsFromADGroupRequest generates requests for GetNestedGroupsFromADGroup
func NewGetNestedGroupsFromADGroupRequest(server string, orgId string, groupId string, params *GetNestedGroupsFromADGroupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/orgs/%s/groups/%s/groups", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageStart", runtime.ParamLocationQuery, *params.PageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageLimit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchTerm != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "searchTerm", runtime.ParamLocationQuery, *params.SearchTerm); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGroupRolesOnOrganizationRequest generates requests for GetGroupRolesOnOrganization
func NewGetGroupRolesOnOrganizationRequest(server string, orgId string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/orgs/%s/groups/%s/roles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateGroupRolesOnOrganizationRequest calls the generic UpdateGroupRolesOnOrganization builder with application/json body
func NewUpdateGroupRolesOnOrganizationRequest(server string, orgId string, groupId string, body UpdateGroupRolesOnOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateGroupRolesOnOrganizationRequestWithBody(server, orgId, groupId, "application/json", bodyReader)
}

// NewUpdateGroupRolesOnOrganizationRequestWithBody generates requests for UpdateGroupRolesOnOrganization with any type of body
func NewUpdateGroupRolesOnOrganizationRequestWithBody(server string, orgId string, groupId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/orgs/%s/groups/%s/roles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPaginatedGroupUsersRequest generates requests for GetPaginatedGroupUsers
func NewGetPaginatedGroupUsersRequest(server string, orgId string, groupId string, params *GetPaginatedGroupUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/orgs/%s/groups/%s/users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageStart", runtime.ParamLocationQuery, *params.PageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageLimit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FirstName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "firstName", runtime.ParamLocationQuery, *params.FirstName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastName", runtime.ParamLocationQuery, *params.LastName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OnlyDirectUsers != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "onlyDirectUsers", runtime.ParamLocationQuery, *params.OnlyDirectUsers); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteOrgScopedOAuthClientRequest calls the generic DeleteOrgScopedOAuthClient builder with application/json body
func NewDeleteOrgScopedOAuthClientRequest(server string, orgId string, body DeleteOrgScopedOAuthClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteOrgScopedOAuthClientRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewDeleteOrgScopedOAuthClientRequestWithBody generates requests for DeleteOrgScopedOAuthClient with any type of body
func NewDeleteOrgScopedOAuthClientRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/orgs/%s/oauth-apps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateOrgScopedOAuthClientRequest calls the generic CreateOrgScopedOAuthClient builder with application/json body
func NewCreateOrgScopedOAuthClientRequest(server string, orgId string, body CreateOrgScopedOAuthClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrgScopedOAuthClientRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewCreateOrgScopedOAuthClientRequestWithBody generates requests for CreateOrgScopedOAuthClient with any type of body
func NewCreateOrgScopedOAuthClientRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/orgs/%s/oauth-apps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgScopedOAuthClientRequest generates requests for GetOrgScopedOAuthClient
func NewGetOrgScopedOAuthClientRequest(server string, orgId string, oauthAppId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "oauthAppId", runtime.ParamLocationPath, oauthAppId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/orgs/%s/oauth-apps/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgRolesRequest generates requests for GetOrgRoles
func NewGetOrgRolesRequest(server string, orgId string, params *GetOrgRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/orgs/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOrgRolesRequest calls the generic PatchOrgRoles builder with application/json body
func NewPatchOrgRolesRequest(server string, orgId string, body PatchOrgRolesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrgRolesRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewPatchOrgRolesRequestWithBody generates requests for PatchOrgRoles with any type of body
func NewPatchOrgRolesRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/orgs/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRoleByOrgIdAndRoleIdRequest generates requests for GetRoleByOrgIdAndRoleId
func NewGetRoleByOrgIdAndRoleIdRequest(server string, orgId string, roleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleId", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/orgs/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgSubOrgsRequest generates requests for GetOrgSubOrgs
func NewGetOrgSubOrgsRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/orgs/%s/sub-orgs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPaginatedOrgUsersInfo1Request generates requests for GetPaginatedOrgUsersInfo1
func NewGetPaginatedOrgUsersInfo1Request(server string, orgId string, params *GetPaginatedOrgUsersInfo1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/orgs/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ServiceDefinitionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "serviceDefinitionId", runtime.ParamLocationQuery, *params.ServiceDefinitionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageStart", runtime.ParamLocationQuery, *params.PageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageLimit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExpandProfile != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expandProfile", runtime.ParamLocationQuery, *params.ExpandProfile); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeGroupIdsInRoles != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeGroupIdsInRoles", runtime.ParamLocationQuery, *params.IncludeGroupIdsInRoles); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchUsersRequest generates requests for SearchUsers
func NewSearchUsersRequest(server string, orgId string, params *SearchUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/orgs/%s/users/search", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userSearchTerm", runtime.ParamLocationQuery, params.UserSearchTerm); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ExpandProfile != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expandProfile", runtime.ParamLocationQuery, *params.ExpandProfile); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeGroupIdsInRoles != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeGroupIdsInRoles", runtime.ParamLocationQuery, *params.IncludeGroupIdsInRoles); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccessTokenInfoRequest generates requests for GetAccessTokenInfo
func NewGetAccessTokenInfoRequest(server string, params *GetAccessTokenInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/userinfo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetUserInAnyOrganization1Request generates requests for GetUserInAnyOrganization1
func NewGetUserInAnyOrganization1Request(server string, acct string, params *GetUserInAnyOrganization1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "acct", runtime.ParamLocationPath, acct)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExpandProfile != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expandProfile", runtime.ParamLocationQuery, *params.ExpandProfile); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserInfoInOrganization1Request generates requests for GetUserInfoInOrganization1
func NewGetUserInfoInOrganization1Request(server string, acct string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "acct", runtime.ParamLocationPath, acct)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/users/%s/orgs/%s/info", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRolesOnOrgWithGroupInfoRequest generates requests for GetUserRolesOnOrgWithGroupInfo
func NewGetUserRolesOnOrgWithGroupInfoRequest(server string, userId string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/users/%s/orgs/%s/access", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRolesInOrganization1Request generates requests for GetUserRolesInOrganization1
func NewGetUserRolesInOrganization1Request(server string, userId string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/users/%s/orgs/%s/roles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchUserRolesInOrganizationRequest calls the generic PatchUserRolesInOrganization builder with application/json body
func NewPatchUserRolesInOrganizationRequest(server string, userId string, orgId string, body PatchUserRolesInOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchUserRolesInOrganizationRequestWithBody(server, userId, orgId, "application/json", bodyReader)
}

// NewPatchUserRolesInOrganizationRequestWithBody generates requests for PatchUserRolesInOrganization with any type of body
func NewPatchUserRolesInOrganizationRequestWithBody(server string, userId string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/users/%s/orgs/%s/roles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserServiceRolesInOrganization1Request generates requests for GetUserServiceRolesInOrganization1
func NewGetUserServiceRolesInOrganization1Request(server string, userId string, orgId string, params *GetUserServiceRolesInOrganization1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/users/%s/orgs/%s/service-roles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ServiceDefinitionLink != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "serviceDefinitionLink", runtime.ParamLocationQuery, *params.ServiceDefinitionLink); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchUserServiceRolesInOrganizationRequest calls the generic PatchUserServiceRolesInOrganization builder with application/json body
func NewPatchUserServiceRolesInOrganizationRequest(server string, userId string, orgId string, body PatchUserServiceRolesInOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchUserServiceRolesInOrganizationRequestWithBody(server, userId, orgId, "application/json", bodyReader)
}

// NewPatchUserServiceRolesInOrganizationRequestWithBody generates requests for PatchUserServiceRolesInOrganization with any type of body
func NewPatchUserServiceRolesInOrganizationRequestWithBody(server string, userId string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/users/%s/orgs/%s/service-roles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserShortInfoInOrganizationRequest generates requests for GetUserShortInfoInOrganization
func NewGetUserShortInfoInOrganizationRequest(server string, userId string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/users/%s/orgs/%s/short-info", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserOrgsRequest generates requests for GetUserOrgs
func NewGetUserOrgsRequest(server string, params *GetUserOrgsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/v2/loggedin/user/orgs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageStart", runtime.ParamLocationQuery, *params.PageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageLimit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPaginatedOrgUsersInfoRequest generates requests for GetPaginatedOrgUsersInfo
func NewGetPaginatedOrgUsersInfoRequest(server string, orgId string, params *GetPaginatedOrgUsersInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/v2/orgs/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ServiceDefinitionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "serviceDefinitionId", runtime.ParamLocationQuery, *params.ServiceDefinitionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageStart", runtime.ParamLocationQuery, *params.PageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageLimit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExpandProfile != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expandProfile", runtime.ParamLocationQuery, *params.ExpandProfile); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeGroupIdsInRoles != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeGroupIdsInRoles", runtime.ParamLocationQuery, *params.IncludeGroupIdsInRoles); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserInAnyOrganizationRequest generates requests for GetUserInAnyOrganization
func NewGetUserInAnyOrganizationRequest(server string, userId string, params *GetUserInAnyOrganizationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/v2/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExpandProfile != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expandProfile", runtime.ParamLocationQuery, *params.ExpandProfile); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserInfoInOrganizationRequest generates requests for GetUserInfoInOrganization
func NewGetUserInfoInOrganizationRequest(server string, userId string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/v2/users/%s/orgs/%s/info", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRolesInOrganizationRequest generates requests for GetUserRolesInOrganization
func NewGetUserRolesInOrganizationRequest(server string, userId string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/v2/users/%s/orgs/%s/roles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserServiceRolesInOrganizationRequest generates requests for GetUserServiceRolesInOrganization
func NewGetUserServiceRolesInOrganizationRequest(server string, userId string, orgId string, params *GetUserServiceRolesInOrganizationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/v2/users/%s/orgs/%s/service-roles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ServiceDefinitionLink != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "serviceDefinitionLink", runtime.ParamLocationQuery, *params.ServiceDefinitionLink); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchUserRolesOnOrganizationRequest calls the generic PatchUserRolesOnOrganization builder with application/json body
func NewPatchUserRolesOnOrganizationRequest(server string, userId string, orgId string, body PatchUserRolesOnOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchUserRolesOnOrganizationRequestWithBody(server, userId, orgId, "application/json", bodyReader)
}

// NewPatchUserRolesOnOrganizationRequestWithBody generates requests for PatchUserRolesOnOrganization with any type of body
func NewPatchUserRolesOnOrganizationRequestWithBody(server string, userId string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/am/api/v3/users/%s/orgs/%s/roles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllServiceDefinitionsRequest generates requests for GetAllServiceDefinitions
func NewGetAllServiceDefinitionsRequest(server string, params *GetAllServiceDefinitionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/slc/api/definitions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrgLink != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgLink", runtime.ParamLocationQuery, *params.OrgLink); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllByOrgServiceDefinitions1Request generates requests for GetAllByOrgServiceDefinitions1
func NewGetAllByOrgServiceDefinitions1Request(server string, orgId string, params *GetAllByOrgServiceDefinitions1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/slc/api/orgs/%s/services", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExcludeUngated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excludeUngated", runtime.ParamLocationQuery, *params.ExcludeUngated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageStart", runtime.ParamLocationQuery, *params.PageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageLimit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPagedServiceDefinitionOrgsRequest generates requests for GetPagedServiceDefinitionOrgs
func NewGetPagedServiceDefinitionOrgsRequest(server string, serviceDefinitionId string, params *GetPagedServiceDefinitionOrgsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceDefinitionId", runtime.ParamLocationPath, serviceDefinitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/slc/api/v2/definitions/%s/orgs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageStart", runtime.ParamLocationQuery, *params.PageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageLimit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllByOrgServiceDefinitionsRequest generates requests for GetAllByOrgServiceDefinitions
func NewGetAllByOrgServiceDefinitionsRequest(server string, orgId string, params *GetAllByOrgServiceDefinitionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csp/gateway/slc/api/v2/orgs/%s/services", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExcludeUngated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excludeUngated", runtime.ParamLocationQuery, *params.ExcludeUngated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageStart", runtime.ParamLocationQuery, *params.PageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageLimit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCheckIDTokenRequest generates requests for CheckIDToken
func NewCheckIDTokenRequest(server string, params *CheckIDTokenParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth/check_id_token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetOpenidConfigurationWithResponse request
	GetOpenidConfigurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenidConfigurationResponse, error)

	// GetAccessTokenWithRefreshTokenWithBodyWithResponse request with any body
	GetAccessTokenWithRefreshTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetAccessTokenWithRefreshTokenResponse, error)

	GetAccessTokenWithRefreshTokenWithResponse(ctx context.Context, body GetAccessTokenWithRefreshTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*GetAccessTokenWithRefreshTokenResponse, error)

	// GetAccessTokenWithAuthorizationRequestWithBodyWithResponse request with any body
	GetAccessTokenWithAuthorizationRequestWithBodyWithResponse(ctx context.Context, params *GetAccessTokenWithAuthorizationRequestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetAccessTokenWithAuthorizationRequestResponse, error)

	GetAccessTokenWithAuthorizationRequestWithResponse(ctx context.Context, params *GetAccessTokenWithAuthorizationRequestParams, body GetAccessTokenWithAuthorizationRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*GetAccessTokenWithAuthorizationRequestResponse, error)

	// GetKeysWithResponse request
	GetKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetKeysResponse, error)

	// LogoutWithBodyWithResponse request with any body
	LogoutWithBodyWithResponse(ctx context.Context, params *LogoutParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogoutResponse, error)

	LogoutWithResponse(ctx context.Context, params *LogoutParams, body LogoutJSONRequestBody, reqEditors ...RequestEditorFn) (*LogoutResponse, error)

	// GetAccessTokenPkceFlowWithBodyWithResponse request with any body
	GetAccessTokenPkceFlowWithBodyWithResponse(ctx context.Context, params *GetAccessTokenPkceFlowParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetAccessTokenPkceFlowResponse, error)

	GetAccessTokenPkceFlowWithFormdataBodyWithResponse(ctx context.Context, params *GetAccessTokenPkceFlowParams, body GetAccessTokenPkceFlowFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetAccessTokenPkceFlowResponse, error)

	// GetPublicKeyWithResponse request
	GetPublicKeyWithResponse(ctx context.Context, params *GetPublicKeyParams, reqEditors ...RequestEditorFn) (*GetPublicKeyResponse, error)

	// SearchGroupsWithResponse request
	SearchGroupsWithResponse(ctx context.Context, params *SearchGroupsParams, reqEditors ...RequestEditorFn) (*SearchGroupsResponse, error)

	// GetLoggedInUserWithResponse request
	GetLoggedInUserWithResponse(ctx context.Context, params *GetLoggedInUserParams, reqEditors ...RequestEditorFn) (*GetLoggedInUserResponse, error)

	// GetUserDefaultOrgWithResponse request
	GetUserDefaultOrgWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserDefaultOrgResponse, error)

	// GetLoggedInUserDetailsWithResponse request
	GetLoggedInUserDetailsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLoggedInUserDetailsResponse, error)

	// GetUserOrgs1WithResponse request
	GetUserOrgs1WithResponse(ctx context.Context, params *GetUserOrgs1Params, reqEditors ...RequestEditorFn) (*GetUserOrgs1Response, error)

	// GetLoggedInUserGroupsOnOrgWithResponse request
	GetLoggedInUserGroupsOnOrgWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetLoggedInUserGroupsOnOrgResponse, error)

	// GetUserOrgInfoWithResponse request
	GetUserOrgInfoWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetUserOrgInfoResponse, error)

	// GetUserOrgRolesWithResponse request
	GetUserOrgRolesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetUserOrgRolesResponse, error)

	// GetUserOrgServiceRolesWithResponse request
	GetUserOrgServiceRolesWithResponse(ctx context.Context, orgId string, params *GetUserOrgServiceRolesParams, reqEditors ...RequestEditorFn) (*GetUserOrgServiceRolesResponse, error)

	// GetPrincipalUserProfileWithResponse request
	GetPrincipalUserProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPrincipalUserProfileResponse, error)

	// UpdateUserProfileWithBodyWithResponse request with any body
	UpdateUserProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserProfileResponse, error)

	UpdateUserProfileWithResponse(ctx context.Context, body UpdateUserProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserProfileResponse, error)

	// UpdateUserPreferencesWithBodyWithResponse request with any body
	UpdateUserPreferencesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserPreferencesResponse, error)

	UpdateUserPreferencesWithResponse(ctx context.Context, body UpdateUserPreferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserPreferencesResponse, error)

	// LoginWithBodyWithResponse request with any body
	LoginWithBodyWithResponse(ctx context.Context, params *LoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	LoginWithResponse(ctx context.Context, params *LoginParams, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	// LoginOauthWithBodyWithResponse request with any body
	LoginOauthWithBodyWithResponse(ctx context.Context, params *LoginOauthParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginOauthResponse, error)

	LoginOauthWithResponse(ctx context.Context, params *LoginOauthParams, body LoginOauthJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginOauthResponse, error)

	// GetByIdWithResponse request
	GetByIdWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetByIdResponse, error)

	// PatchOrgWithBodyWithResponse request with any body
	PatchOrgWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgResponse, error)

	PatchOrgWithResponse(ctx context.Context, orgId string, body PatchOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgResponse, error)

	// RemoveGroupsFromOrganizationWithBodyWithResponse request with any body
	RemoveGroupsFromOrganizationWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveGroupsFromOrganizationResponse, error)

	RemoveGroupsFromOrganizationWithResponse(ctx context.Context, orgId string, body RemoveGroupsFromOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveGroupsFromOrganizationResponse, error)

	// GetOrganizationGroupsWithResponse request
	GetOrganizationGroupsWithResponse(ctx context.Context, orgId string, params *GetOrganizationGroupsParams, reqEditors ...RequestEditorFn) (*GetOrganizationGroupsResponse, error)

	// SearchOrgGroupsWithResponse request
	SearchOrgGroupsWithResponse(ctx context.Context, orgId string, params *SearchOrgGroupsParams, reqEditors ...RequestEditorFn) (*SearchOrgGroupsResponse, error)

	// GetNestedGroupsFromADGroupWithResponse request
	GetNestedGroupsFromADGroupWithResponse(ctx context.Context, orgId string, groupId string, params *GetNestedGroupsFromADGroupParams, reqEditors ...RequestEditorFn) (*GetNestedGroupsFromADGroupResponse, error)

	// GetGroupRolesOnOrganizationWithResponse request
	GetGroupRolesOnOrganizationWithResponse(ctx context.Context, orgId string, groupId string, reqEditors ...RequestEditorFn) (*GetGroupRolesOnOrganizationResponse, error)

	// UpdateGroupRolesOnOrganizationWithBodyWithResponse request with any body
	UpdateGroupRolesOnOrganizationWithBodyWithResponse(ctx context.Context, orgId string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGroupRolesOnOrganizationResponse, error)

	UpdateGroupRolesOnOrganizationWithResponse(ctx context.Context, orgId string, groupId string, body UpdateGroupRolesOnOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGroupRolesOnOrganizationResponse, error)

	// GetPaginatedGroupUsersWithResponse request
	GetPaginatedGroupUsersWithResponse(ctx context.Context, orgId string, groupId string, params *GetPaginatedGroupUsersParams, reqEditors ...RequestEditorFn) (*GetPaginatedGroupUsersResponse, error)

	// DeleteOrgScopedOAuthClientWithBodyWithResponse request with any body
	DeleteOrgScopedOAuthClientWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteOrgScopedOAuthClientResponse, error)

	DeleteOrgScopedOAuthClientWithResponse(ctx context.Context, orgId string, body DeleteOrgScopedOAuthClientJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteOrgScopedOAuthClientResponse, error)

	// CreateOrgScopedOAuthClientWithBodyWithResponse request with any body
	CreateOrgScopedOAuthClientWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrgScopedOAuthClientResponse, error)

	CreateOrgScopedOAuthClientWithResponse(ctx context.Context, orgId string, body CreateOrgScopedOAuthClientJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrgScopedOAuthClientResponse, error)

	// GetOrgScopedOAuthClientWithResponse request
	GetOrgScopedOAuthClientWithResponse(ctx context.Context, orgId string, oauthAppId string, reqEditors ...RequestEditorFn) (*GetOrgScopedOAuthClientResponse, error)

	// GetOrgRolesWithResponse request
	GetOrgRolesWithResponse(ctx context.Context, orgId string, params *GetOrgRolesParams, reqEditors ...RequestEditorFn) (*GetOrgRolesResponse, error)

	// PatchOrgRolesWithBodyWithResponse request with any body
	PatchOrgRolesWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgRolesResponse, error)

	PatchOrgRolesWithResponse(ctx context.Context, orgId string, body PatchOrgRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgRolesResponse, error)

	// GetRoleByOrgIdAndRoleIdWithResponse request
	GetRoleByOrgIdAndRoleIdWithResponse(ctx context.Context, orgId string, roleId string, reqEditors ...RequestEditorFn) (*GetRoleByOrgIdAndRoleIdResponse, error)

	// GetOrgSubOrgsWithResponse request
	GetOrgSubOrgsWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgSubOrgsResponse, error)

	// GetPaginatedOrgUsersInfo1WithResponse request
	GetPaginatedOrgUsersInfo1WithResponse(ctx context.Context, orgId string, params *GetPaginatedOrgUsersInfo1Params, reqEditors ...RequestEditorFn) (*GetPaginatedOrgUsersInfo1Response, error)

	// SearchUsersWithResponse request
	SearchUsersWithResponse(ctx context.Context, orgId string, params *SearchUsersParams, reqEditors ...RequestEditorFn) (*SearchUsersResponse, error)

	// GetAccessTokenInfoWithResponse request
	GetAccessTokenInfoWithResponse(ctx context.Context, params *GetAccessTokenInfoParams, reqEditors ...RequestEditorFn) (*GetAccessTokenInfoResponse, error)

	// GetUserInAnyOrganization1WithResponse request
	GetUserInAnyOrganization1WithResponse(ctx context.Context, acct string, params *GetUserInAnyOrganization1Params, reqEditors ...RequestEditorFn) (*GetUserInAnyOrganization1Response, error)

	// GetUserInfoInOrganization1WithResponse request
	GetUserInfoInOrganization1WithResponse(ctx context.Context, acct string, orgId string, reqEditors ...RequestEditorFn) (*GetUserInfoInOrganization1Response, error)

	// GetUserRolesOnOrgWithGroupInfoWithResponse request
	GetUserRolesOnOrgWithGroupInfoWithResponse(ctx context.Context, userId string, orgId string, reqEditors ...RequestEditorFn) (*GetUserRolesOnOrgWithGroupInfoResponse, error)

	// GetUserRolesInOrganization1WithResponse request
	GetUserRolesInOrganization1WithResponse(ctx context.Context, userId string, orgId string, reqEditors ...RequestEditorFn) (*GetUserRolesInOrganization1Response, error)

	// PatchUserRolesInOrganizationWithBodyWithResponse request with any body
	PatchUserRolesInOrganizationWithBodyWithResponse(ctx context.Context, userId string, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUserRolesInOrganizationResponse, error)

	PatchUserRolesInOrganizationWithResponse(ctx context.Context, userId string, orgId string, body PatchUserRolesInOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUserRolesInOrganizationResponse, error)

	// GetUserServiceRolesInOrganization1WithResponse request
	GetUserServiceRolesInOrganization1WithResponse(ctx context.Context, userId string, orgId string, params *GetUserServiceRolesInOrganization1Params, reqEditors ...RequestEditorFn) (*GetUserServiceRolesInOrganization1Response, error)

	// PatchUserServiceRolesInOrganizationWithBodyWithResponse request with any body
	PatchUserServiceRolesInOrganizationWithBodyWithResponse(ctx context.Context, userId string, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUserServiceRolesInOrganizationResponse, error)

	PatchUserServiceRolesInOrganizationWithResponse(ctx context.Context, userId string, orgId string, body PatchUserServiceRolesInOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUserServiceRolesInOrganizationResponse, error)

	// GetUserShortInfoInOrganizationWithResponse request
	GetUserShortInfoInOrganizationWithResponse(ctx context.Context, userId string, orgId string, reqEditors ...RequestEditorFn) (*GetUserShortInfoInOrganizationResponse, error)

	// GetUserOrgsWithResponse request
	GetUserOrgsWithResponse(ctx context.Context, params *GetUserOrgsParams, reqEditors ...RequestEditorFn) (*GetUserOrgsResponse, error)

	// GetPaginatedOrgUsersInfoWithResponse request
	GetPaginatedOrgUsersInfoWithResponse(ctx context.Context, orgId string, params *GetPaginatedOrgUsersInfoParams, reqEditors ...RequestEditorFn) (*GetPaginatedOrgUsersInfoResponse, error)

	// GetUserInAnyOrganizationWithResponse request
	GetUserInAnyOrganizationWithResponse(ctx context.Context, userId string, params *GetUserInAnyOrganizationParams, reqEditors ...RequestEditorFn) (*GetUserInAnyOrganizationResponse, error)

	// GetUserInfoInOrganizationWithResponse request
	GetUserInfoInOrganizationWithResponse(ctx context.Context, userId string, orgId string, reqEditors ...RequestEditorFn) (*GetUserInfoInOrganizationResponse, error)

	// GetUserRolesInOrganizationWithResponse request
	GetUserRolesInOrganizationWithResponse(ctx context.Context, userId string, orgId string, reqEditors ...RequestEditorFn) (*GetUserRolesInOrganizationResponse, error)

	// GetUserServiceRolesInOrganizationWithResponse request
	GetUserServiceRolesInOrganizationWithResponse(ctx context.Context, userId string, orgId string, params *GetUserServiceRolesInOrganizationParams, reqEditors ...RequestEditorFn) (*GetUserServiceRolesInOrganizationResponse, error)

	// PatchUserRolesOnOrganizationWithBodyWithResponse request with any body
	PatchUserRolesOnOrganizationWithBodyWithResponse(ctx context.Context, userId string, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUserRolesOnOrganizationResponse, error)

	PatchUserRolesOnOrganizationWithResponse(ctx context.Context, userId string, orgId string, body PatchUserRolesOnOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUserRolesOnOrganizationResponse, error)

	// GetAllServiceDefinitionsWithResponse request
	GetAllServiceDefinitionsWithResponse(ctx context.Context, params *GetAllServiceDefinitionsParams, reqEditors ...RequestEditorFn) (*GetAllServiceDefinitionsResponse, error)

	// GetAllByOrgServiceDefinitions1WithResponse request
	GetAllByOrgServiceDefinitions1WithResponse(ctx context.Context, orgId string, params *GetAllByOrgServiceDefinitions1Params, reqEditors ...RequestEditorFn) (*GetAllByOrgServiceDefinitions1Response, error)

	// GetPagedServiceDefinitionOrgsWithResponse request
	GetPagedServiceDefinitionOrgsWithResponse(ctx context.Context, serviceDefinitionId string, params *GetPagedServiceDefinitionOrgsParams, reqEditors ...RequestEditorFn) (*GetPagedServiceDefinitionOrgsResponse, error)

	// GetAllByOrgServiceDefinitionsWithResponse request
	GetAllByOrgServiceDefinitionsWithResponse(ctx context.Context, orgId string, params *GetAllByOrgServiceDefinitionsParams, reqEditors ...RequestEditorFn) (*GetAllByOrgServiceDefinitionsResponse, error)

	// CheckIDTokenWithResponse request
	CheckIDTokenWithResponse(ctx context.Context, params *CheckIDTokenParams, reqEditors ...RequestEditorFn) (*CheckIDTokenResponse, error)
}

type GetOpenidConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOpenidConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOpenidConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccessTokenWithRefreshTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAccessTokenWithRefreshTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccessTokenWithRefreshTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccessTokenWithAuthorizationRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAccessTokenWithAuthorizationRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccessTokenWithAuthorizationRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccessTokenPkceFlowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccessToken
	JSON400      *AccessToken
	JSON403      *AccessToken
	JSON404      *AccessToken
}

// Status returns HTTPResponse.Status
func (r GetAccessTokenPkceFlowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccessTokenPkceFlowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPublicKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SearchGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLoggedInUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLoggedInUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLoggedInUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserDefaultOrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUserDefaultOrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserDefaultOrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLoggedInUserDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLoggedInUserDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLoggedInUserDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserOrgs1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUserOrgs1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserOrgs1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLoggedInUserGroupsOnOrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLoggedInUserGroupsOnOrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLoggedInUserGroupsOnOrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserOrgInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUserOrgInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserOrgInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserOrgRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUserOrgRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserOrgRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserOrgServiceRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUserOrgServiceRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserOrgServiceRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPrincipalUserProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPrincipalUserProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPrincipalUserProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateUserProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserPreferencesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateUserPreferencesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserPreferencesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginOauthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LoginOauthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginOauthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchOrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveGroupsFromOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveGroupsFromOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveGroupsFromOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOrganizationGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchOrgGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SearchOrgGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchOrgGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNestedGroupsFromADGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetNestedGroupsFromADGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNestedGroupsFromADGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupRolesOnOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetGroupRolesOnOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupRolesOnOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateGroupRolesOnOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateGroupRolesOnOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateGroupRolesOnOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaginatedGroupUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPaginatedGroupUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaginatedGroupUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgScopedOAuthClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrgScopedOAuthClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgScopedOAuthClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrgScopedOAuthClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateOrgScopedOAuthClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrgScopedOAuthClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgScopedOAuthClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOrgScopedOAuthClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgScopedOAuthClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOrgRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchOrgRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRoleByOrgIdAndRoleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRoleByOrgIdAndRoleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRoleByOrgIdAndRoleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgSubOrgsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOrgSubOrgsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgSubOrgsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaginatedOrgUsersInfo1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPaginatedOrgUsersInfo1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaginatedOrgUsersInfo1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SearchUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccessTokenInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAccessTokenInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccessTokenInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserInAnyOrganization1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUserInAnyOrganization1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserInAnyOrganization1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserInfoInOrganization1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUserInfoInOrganization1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserInfoInOrganization1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserRolesOnOrgWithGroupInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUserRolesOnOrgWithGroupInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserRolesOnOrgWithGroupInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserRolesInOrganization1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUserRolesInOrganization1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserRolesInOrganization1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchUserRolesInOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchUserRolesInOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchUserRolesInOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserServiceRolesInOrganization1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUserServiceRolesInOrganization1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserServiceRolesInOrganization1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchUserServiceRolesInOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchUserServiceRolesInOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchUserServiceRolesInOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserShortInfoInOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUserShortInfoInOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserShortInfoInOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserOrgsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUserOrgsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserOrgsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaginatedOrgUsersInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPaginatedOrgUsersInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaginatedOrgUsersInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserInAnyOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUserInAnyOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserInAnyOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserInfoInOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUserInfoInOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserInfoInOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserRolesInOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUserRolesInOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserRolesInOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserServiceRolesInOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUserServiceRolesInOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserServiceRolesInOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchUserRolesOnOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchUserRolesOnOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchUserRolesOnOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllServiceDefinitionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAllServiceDefinitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllServiceDefinitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllByOrgServiceDefinitions1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAllByOrgServiceDefinitions1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllByOrgServiceDefinitions1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPagedServiceDefinitionOrgsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPagedServiceDefinitionOrgsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPagedServiceDefinitionOrgsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllByOrgServiceDefinitionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAllByOrgServiceDefinitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllByOrgServiceDefinitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckIDTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CheckIDTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckIDTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetOpenidConfigurationWithResponse request returning *GetOpenidConfigurationResponse
func (c *ClientWithResponses) GetOpenidConfigurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenidConfigurationResponse, error) {
	rsp, err := c.GetOpenidConfiguration(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpenidConfigurationResponse(rsp)
}

// GetAccessTokenWithRefreshTokenWithBodyWithResponse request with arbitrary body returning *GetAccessTokenWithRefreshTokenResponse
func (c *ClientWithResponses) GetAccessTokenWithRefreshTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetAccessTokenWithRefreshTokenResponse, error) {
	rsp, err := c.GetAccessTokenWithRefreshTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccessTokenWithRefreshTokenResponse(rsp)
}

func (c *ClientWithResponses) GetAccessTokenWithRefreshTokenWithResponse(ctx context.Context, body GetAccessTokenWithRefreshTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*GetAccessTokenWithRefreshTokenResponse, error) {
	rsp, err := c.GetAccessTokenWithRefreshToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccessTokenWithRefreshTokenResponse(rsp)
}

// GetAccessTokenWithAuthorizationRequestWithBodyWithResponse request with arbitrary body returning *GetAccessTokenWithAuthorizationRequestResponse
func (c *ClientWithResponses) GetAccessTokenWithAuthorizationRequestWithBodyWithResponse(ctx context.Context, params *GetAccessTokenWithAuthorizationRequestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetAccessTokenWithAuthorizationRequestResponse, error) {
	rsp, err := c.GetAccessTokenWithAuthorizationRequestWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccessTokenWithAuthorizationRequestResponse(rsp)
}

func (c *ClientWithResponses) GetAccessTokenWithAuthorizationRequestWithResponse(ctx context.Context, params *GetAccessTokenWithAuthorizationRequestParams, body GetAccessTokenWithAuthorizationRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*GetAccessTokenWithAuthorizationRequestResponse, error) {
	rsp, err := c.GetAccessTokenWithAuthorizationRequest(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccessTokenWithAuthorizationRequestResponse(rsp)
}

// GetKeysWithResponse request returning *GetKeysResponse
func (c *ClientWithResponses) GetKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetKeysResponse, error) {
	rsp, err := c.GetKeys(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKeysResponse(rsp)
}

// LogoutWithBodyWithResponse request with arbitrary body returning *LogoutResponse
func (c *ClientWithResponses) LogoutWithBodyWithResponse(ctx context.Context, params *LogoutParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LogoutResponse, error) {
	rsp, err := c.LogoutWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogoutResponse(rsp)
}

func (c *ClientWithResponses) LogoutWithResponse(ctx context.Context, params *LogoutParams, body LogoutJSONRequestBody, reqEditors ...RequestEditorFn) (*LogoutResponse, error) {
	rsp, err := c.Logout(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogoutResponse(rsp)
}

// GetAccessTokenPkceFlowWithBodyWithResponse request with arbitrary body returning *GetAccessTokenPkceFlowResponse
func (c *ClientWithResponses) GetAccessTokenPkceFlowWithBodyWithResponse(ctx context.Context, params *GetAccessTokenPkceFlowParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetAccessTokenPkceFlowResponse, error) {
	rsp, err := c.GetAccessTokenPkceFlowWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccessTokenPkceFlowResponse(rsp)
}

func (c *ClientWithResponses) GetAccessTokenPkceFlowWithFormdataBodyWithResponse(ctx context.Context, params *GetAccessTokenPkceFlowParams, body GetAccessTokenPkceFlowFormdataRequestBody, reqEditors ...RequestEditorFn) (*GetAccessTokenPkceFlowResponse, error) {
	rsp, err := c.GetAccessTokenPkceFlowWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccessTokenPkceFlowResponse(rsp)
}

// GetPublicKeyWithResponse request returning *GetPublicKeyResponse
func (c *ClientWithResponses) GetPublicKeyWithResponse(ctx context.Context, params *GetPublicKeyParams, reqEditors ...RequestEditorFn) (*GetPublicKeyResponse, error) {
	rsp, err := c.GetPublicKey(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicKeyResponse(rsp)
}

// SearchGroupsWithResponse request returning *SearchGroupsResponse
func (c *ClientWithResponses) SearchGroupsWithResponse(ctx context.Context, params *SearchGroupsParams, reqEditors ...RequestEditorFn) (*SearchGroupsResponse, error) {
	rsp, err := c.SearchGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchGroupsResponse(rsp)
}

// GetLoggedInUserWithResponse request returning *GetLoggedInUserResponse
func (c *ClientWithResponses) GetLoggedInUserWithResponse(ctx context.Context, params *GetLoggedInUserParams, reqEditors ...RequestEditorFn) (*GetLoggedInUserResponse, error) {
	rsp, err := c.GetLoggedInUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLoggedInUserResponse(rsp)
}

// GetUserDefaultOrgWithResponse request returning *GetUserDefaultOrgResponse
func (c *ClientWithResponses) GetUserDefaultOrgWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserDefaultOrgResponse, error) {
	rsp, err := c.GetUserDefaultOrg(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserDefaultOrgResponse(rsp)
}

// GetLoggedInUserDetailsWithResponse request returning *GetLoggedInUserDetailsResponse
func (c *ClientWithResponses) GetLoggedInUserDetailsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLoggedInUserDetailsResponse, error) {
	rsp, err := c.GetLoggedInUserDetails(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLoggedInUserDetailsResponse(rsp)
}

// GetUserOrgs1WithResponse request returning *GetUserOrgs1Response
func (c *ClientWithResponses) GetUserOrgs1WithResponse(ctx context.Context, params *GetUserOrgs1Params, reqEditors ...RequestEditorFn) (*GetUserOrgs1Response, error) {
	rsp, err := c.GetUserOrgs1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserOrgs1Response(rsp)
}

// GetLoggedInUserGroupsOnOrgWithResponse request returning *GetLoggedInUserGroupsOnOrgResponse
func (c *ClientWithResponses) GetLoggedInUserGroupsOnOrgWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetLoggedInUserGroupsOnOrgResponse, error) {
	rsp, err := c.GetLoggedInUserGroupsOnOrg(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLoggedInUserGroupsOnOrgResponse(rsp)
}

// GetUserOrgInfoWithResponse request returning *GetUserOrgInfoResponse
func (c *ClientWithResponses) GetUserOrgInfoWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetUserOrgInfoResponse, error) {
	rsp, err := c.GetUserOrgInfo(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserOrgInfoResponse(rsp)
}

// GetUserOrgRolesWithResponse request returning *GetUserOrgRolesResponse
func (c *ClientWithResponses) GetUserOrgRolesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetUserOrgRolesResponse, error) {
	rsp, err := c.GetUserOrgRoles(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserOrgRolesResponse(rsp)
}

// GetUserOrgServiceRolesWithResponse request returning *GetUserOrgServiceRolesResponse
func (c *ClientWithResponses) GetUserOrgServiceRolesWithResponse(ctx context.Context, orgId string, params *GetUserOrgServiceRolesParams, reqEditors ...RequestEditorFn) (*GetUserOrgServiceRolesResponse, error) {
	rsp, err := c.GetUserOrgServiceRoles(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserOrgServiceRolesResponse(rsp)
}

// GetPrincipalUserProfileWithResponse request returning *GetPrincipalUserProfileResponse
func (c *ClientWithResponses) GetPrincipalUserProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPrincipalUserProfileResponse, error) {
	rsp, err := c.GetPrincipalUserProfile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPrincipalUserProfileResponse(rsp)
}

// UpdateUserProfileWithBodyWithResponse request with arbitrary body returning *UpdateUserProfileResponse
func (c *ClientWithResponses) UpdateUserProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserProfileResponse, error) {
	rsp, err := c.UpdateUserProfileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserProfileResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserProfileWithResponse(ctx context.Context, body UpdateUserProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserProfileResponse, error) {
	rsp, err := c.UpdateUserProfile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserProfileResponse(rsp)
}

// UpdateUserPreferencesWithBodyWithResponse request with arbitrary body returning *UpdateUserPreferencesResponse
func (c *ClientWithResponses) UpdateUserPreferencesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserPreferencesResponse, error) {
	rsp, err := c.UpdateUserPreferencesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserPreferencesResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserPreferencesWithResponse(ctx context.Context, body UpdateUserPreferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserPreferencesResponse, error) {
	rsp, err := c.UpdateUserPreferences(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserPreferencesResponse(rsp)
}

// LoginWithBodyWithResponse request with arbitrary body returning *LoginResponse
func (c *ClientWithResponses) LoginWithBodyWithResponse(ctx context.Context, params *LoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.LoginWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

func (c *ClientWithResponses) LoginWithResponse(ctx context.Context, params *LoginParams, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.Login(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

// LoginOauthWithBodyWithResponse request with arbitrary body returning *LoginOauthResponse
func (c *ClientWithResponses) LoginOauthWithBodyWithResponse(ctx context.Context, params *LoginOauthParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginOauthResponse, error) {
	rsp, err := c.LoginOauthWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginOauthResponse(rsp)
}

func (c *ClientWithResponses) LoginOauthWithResponse(ctx context.Context, params *LoginOauthParams, body LoginOauthJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginOauthResponse, error) {
	rsp, err := c.LoginOauth(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginOauthResponse(rsp)
}

// GetByIdWithResponse request returning *GetByIdResponse
func (c *ClientWithResponses) GetByIdWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetByIdResponse, error) {
	rsp, err := c.GetById(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetByIdResponse(rsp)
}

// PatchOrgWithBodyWithResponse request with arbitrary body returning *PatchOrgResponse
func (c *ClientWithResponses) PatchOrgWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgResponse, error) {
	rsp, err := c.PatchOrgWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgResponse(rsp)
}

func (c *ClientWithResponses) PatchOrgWithResponse(ctx context.Context, orgId string, body PatchOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgResponse, error) {
	rsp, err := c.PatchOrg(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgResponse(rsp)
}

// RemoveGroupsFromOrganizationWithBodyWithResponse request with arbitrary body returning *RemoveGroupsFromOrganizationResponse
func (c *ClientWithResponses) RemoveGroupsFromOrganizationWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveGroupsFromOrganizationResponse, error) {
	rsp, err := c.RemoveGroupsFromOrganizationWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveGroupsFromOrganizationResponse(rsp)
}

func (c *ClientWithResponses) RemoveGroupsFromOrganizationWithResponse(ctx context.Context, orgId string, body RemoveGroupsFromOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveGroupsFromOrganizationResponse, error) {
	rsp, err := c.RemoveGroupsFromOrganization(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveGroupsFromOrganizationResponse(rsp)
}

// GetOrganizationGroupsWithResponse request returning *GetOrganizationGroupsResponse
func (c *ClientWithResponses) GetOrganizationGroupsWithResponse(ctx context.Context, orgId string, params *GetOrganizationGroupsParams, reqEditors ...RequestEditorFn) (*GetOrganizationGroupsResponse, error) {
	rsp, err := c.GetOrganizationGroups(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationGroupsResponse(rsp)
}

// SearchOrgGroupsWithResponse request returning *SearchOrgGroupsResponse
func (c *ClientWithResponses) SearchOrgGroupsWithResponse(ctx context.Context, orgId string, params *SearchOrgGroupsParams, reqEditors ...RequestEditorFn) (*SearchOrgGroupsResponse, error) {
	rsp, err := c.SearchOrgGroups(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchOrgGroupsResponse(rsp)
}

// GetNestedGroupsFromADGroupWithResponse request returning *GetNestedGroupsFromADGroupResponse
func (c *ClientWithResponses) GetNestedGroupsFromADGroupWithResponse(ctx context.Context, orgId string, groupId string, params *GetNestedGroupsFromADGroupParams, reqEditors ...RequestEditorFn) (*GetNestedGroupsFromADGroupResponse, error) {
	rsp, err := c.GetNestedGroupsFromADGroup(ctx, orgId, groupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNestedGroupsFromADGroupResponse(rsp)
}

// GetGroupRolesOnOrganizationWithResponse request returning *GetGroupRolesOnOrganizationResponse
func (c *ClientWithResponses) GetGroupRolesOnOrganizationWithResponse(ctx context.Context, orgId string, groupId string, reqEditors ...RequestEditorFn) (*GetGroupRolesOnOrganizationResponse, error) {
	rsp, err := c.GetGroupRolesOnOrganization(ctx, orgId, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupRolesOnOrganizationResponse(rsp)
}

// UpdateGroupRolesOnOrganizationWithBodyWithResponse request with arbitrary body returning *UpdateGroupRolesOnOrganizationResponse
func (c *ClientWithResponses) UpdateGroupRolesOnOrganizationWithBodyWithResponse(ctx context.Context, orgId string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGroupRolesOnOrganizationResponse, error) {
	rsp, err := c.UpdateGroupRolesOnOrganizationWithBody(ctx, orgId, groupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGroupRolesOnOrganizationResponse(rsp)
}

func (c *ClientWithResponses) UpdateGroupRolesOnOrganizationWithResponse(ctx context.Context, orgId string, groupId string, body UpdateGroupRolesOnOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGroupRolesOnOrganizationResponse, error) {
	rsp, err := c.UpdateGroupRolesOnOrganization(ctx, orgId, groupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGroupRolesOnOrganizationResponse(rsp)
}

// GetPaginatedGroupUsersWithResponse request returning *GetPaginatedGroupUsersResponse
func (c *ClientWithResponses) GetPaginatedGroupUsersWithResponse(ctx context.Context, orgId string, groupId string, params *GetPaginatedGroupUsersParams, reqEditors ...RequestEditorFn) (*GetPaginatedGroupUsersResponse, error) {
	rsp, err := c.GetPaginatedGroupUsers(ctx, orgId, groupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaginatedGroupUsersResponse(rsp)
}

// DeleteOrgScopedOAuthClientWithBodyWithResponse request with arbitrary body returning *DeleteOrgScopedOAuthClientResponse
func (c *ClientWithResponses) DeleteOrgScopedOAuthClientWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteOrgScopedOAuthClientResponse, error) {
	rsp, err := c.DeleteOrgScopedOAuthClientWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgScopedOAuthClientResponse(rsp)
}

func (c *ClientWithResponses) DeleteOrgScopedOAuthClientWithResponse(ctx context.Context, orgId string, body DeleteOrgScopedOAuthClientJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteOrgScopedOAuthClientResponse, error) {
	rsp, err := c.DeleteOrgScopedOAuthClient(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgScopedOAuthClientResponse(rsp)
}

// CreateOrgScopedOAuthClientWithBodyWithResponse request with arbitrary body returning *CreateOrgScopedOAuthClientResponse
func (c *ClientWithResponses) CreateOrgScopedOAuthClientWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrgScopedOAuthClientResponse, error) {
	rsp, err := c.CreateOrgScopedOAuthClientWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrgScopedOAuthClientResponse(rsp)
}

func (c *ClientWithResponses) CreateOrgScopedOAuthClientWithResponse(ctx context.Context, orgId string, body CreateOrgScopedOAuthClientJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrgScopedOAuthClientResponse, error) {
	rsp, err := c.CreateOrgScopedOAuthClient(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrgScopedOAuthClientResponse(rsp)
}

// GetOrgScopedOAuthClientWithResponse request returning *GetOrgScopedOAuthClientResponse
func (c *ClientWithResponses) GetOrgScopedOAuthClientWithResponse(ctx context.Context, orgId string, oauthAppId string, reqEditors ...RequestEditorFn) (*GetOrgScopedOAuthClientResponse, error) {
	rsp, err := c.GetOrgScopedOAuthClient(ctx, orgId, oauthAppId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgScopedOAuthClientResponse(rsp)
}

// GetOrgRolesWithResponse request returning *GetOrgRolesResponse
func (c *ClientWithResponses) GetOrgRolesWithResponse(ctx context.Context, orgId string, params *GetOrgRolesParams, reqEditors ...RequestEditorFn) (*GetOrgRolesResponse, error) {
	rsp, err := c.GetOrgRoles(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgRolesResponse(rsp)
}

// PatchOrgRolesWithBodyWithResponse request with arbitrary body returning *PatchOrgRolesResponse
func (c *ClientWithResponses) PatchOrgRolesWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgRolesResponse, error) {
	rsp, err := c.PatchOrgRolesWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgRolesResponse(rsp)
}

func (c *ClientWithResponses) PatchOrgRolesWithResponse(ctx context.Context, orgId string, body PatchOrgRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgRolesResponse, error) {
	rsp, err := c.PatchOrgRoles(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgRolesResponse(rsp)
}

// GetRoleByOrgIdAndRoleIdWithResponse request returning *GetRoleByOrgIdAndRoleIdResponse
func (c *ClientWithResponses) GetRoleByOrgIdAndRoleIdWithResponse(ctx context.Context, orgId string, roleId string, reqEditors ...RequestEditorFn) (*GetRoleByOrgIdAndRoleIdResponse, error) {
	rsp, err := c.GetRoleByOrgIdAndRoleId(ctx, orgId, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRoleByOrgIdAndRoleIdResponse(rsp)
}

// GetOrgSubOrgsWithResponse request returning *GetOrgSubOrgsResponse
func (c *ClientWithResponses) GetOrgSubOrgsWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgSubOrgsResponse, error) {
	rsp, err := c.GetOrgSubOrgs(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgSubOrgsResponse(rsp)
}

// GetPaginatedOrgUsersInfo1WithResponse request returning *GetPaginatedOrgUsersInfo1Response
func (c *ClientWithResponses) GetPaginatedOrgUsersInfo1WithResponse(ctx context.Context, orgId string, params *GetPaginatedOrgUsersInfo1Params, reqEditors ...RequestEditorFn) (*GetPaginatedOrgUsersInfo1Response, error) {
	rsp, err := c.GetPaginatedOrgUsersInfo1(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaginatedOrgUsersInfo1Response(rsp)
}

// SearchUsersWithResponse request returning *SearchUsersResponse
func (c *ClientWithResponses) SearchUsersWithResponse(ctx context.Context, orgId string, params *SearchUsersParams, reqEditors ...RequestEditorFn) (*SearchUsersResponse, error) {
	rsp, err := c.SearchUsers(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchUsersResponse(rsp)
}

// GetAccessTokenInfoWithResponse request returning *GetAccessTokenInfoResponse
func (c *ClientWithResponses) GetAccessTokenInfoWithResponse(ctx context.Context, params *GetAccessTokenInfoParams, reqEditors ...RequestEditorFn) (*GetAccessTokenInfoResponse, error) {
	rsp, err := c.GetAccessTokenInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccessTokenInfoResponse(rsp)
}

// GetUserInAnyOrganization1WithResponse request returning *GetUserInAnyOrganization1Response
func (c *ClientWithResponses) GetUserInAnyOrganization1WithResponse(ctx context.Context, acct string, params *GetUserInAnyOrganization1Params, reqEditors ...RequestEditorFn) (*GetUserInAnyOrganization1Response, error) {
	rsp, err := c.GetUserInAnyOrganization1(ctx, acct, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserInAnyOrganization1Response(rsp)
}

// GetUserInfoInOrganization1WithResponse request returning *GetUserInfoInOrganization1Response
func (c *ClientWithResponses) GetUserInfoInOrganization1WithResponse(ctx context.Context, acct string, orgId string, reqEditors ...RequestEditorFn) (*GetUserInfoInOrganization1Response, error) {
	rsp, err := c.GetUserInfoInOrganization1(ctx, acct, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserInfoInOrganization1Response(rsp)
}

// GetUserRolesOnOrgWithGroupInfoWithResponse request returning *GetUserRolesOnOrgWithGroupInfoResponse
func (c *ClientWithResponses) GetUserRolesOnOrgWithGroupInfoWithResponse(ctx context.Context, userId string, orgId string, reqEditors ...RequestEditorFn) (*GetUserRolesOnOrgWithGroupInfoResponse, error) {
	rsp, err := c.GetUserRolesOnOrgWithGroupInfo(ctx, userId, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserRolesOnOrgWithGroupInfoResponse(rsp)
}

// GetUserRolesInOrganization1WithResponse request returning *GetUserRolesInOrganization1Response
func (c *ClientWithResponses) GetUserRolesInOrganization1WithResponse(ctx context.Context, userId string, orgId string, reqEditors ...RequestEditorFn) (*GetUserRolesInOrganization1Response, error) {
	rsp, err := c.GetUserRolesInOrganization1(ctx, userId, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserRolesInOrganization1Response(rsp)
}

// PatchUserRolesInOrganizationWithBodyWithResponse request with arbitrary body returning *PatchUserRolesInOrganizationResponse
func (c *ClientWithResponses) PatchUserRolesInOrganizationWithBodyWithResponse(ctx context.Context, userId string, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUserRolesInOrganizationResponse, error) {
	rsp, err := c.PatchUserRolesInOrganizationWithBody(ctx, userId, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUserRolesInOrganizationResponse(rsp)
}

func (c *ClientWithResponses) PatchUserRolesInOrganizationWithResponse(ctx context.Context, userId string, orgId string, body PatchUserRolesInOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUserRolesInOrganizationResponse, error) {
	rsp, err := c.PatchUserRolesInOrganization(ctx, userId, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUserRolesInOrganizationResponse(rsp)
}

// GetUserServiceRolesInOrganization1WithResponse request returning *GetUserServiceRolesInOrganization1Response
func (c *ClientWithResponses) GetUserServiceRolesInOrganization1WithResponse(ctx context.Context, userId string, orgId string, params *GetUserServiceRolesInOrganization1Params, reqEditors ...RequestEditorFn) (*GetUserServiceRolesInOrganization1Response, error) {
	rsp, err := c.GetUserServiceRolesInOrganization1(ctx, userId, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserServiceRolesInOrganization1Response(rsp)
}

// PatchUserServiceRolesInOrganizationWithBodyWithResponse request with arbitrary body returning *PatchUserServiceRolesInOrganizationResponse
func (c *ClientWithResponses) PatchUserServiceRolesInOrganizationWithBodyWithResponse(ctx context.Context, userId string, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUserServiceRolesInOrganizationResponse, error) {
	rsp, err := c.PatchUserServiceRolesInOrganizationWithBody(ctx, userId, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUserServiceRolesInOrganizationResponse(rsp)
}

func (c *ClientWithResponses) PatchUserServiceRolesInOrganizationWithResponse(ctx context.Context, userId string, orgId string, body PatchUserServiceRolesInOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUserServiceRolesInOrganizationResponse, error) {
	rsp, err := c.PatchUserServiceRolesInOrganization(ctx, userId, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUserServiceRolesInOrganizationResponse(rsp)
}

// GetUserShortInfoInOrganizationWithResponse request returning *GetUserShortInfoInOrganizationResponse
func (c *ClientWithResponses) GetUserShortInfoInOrganizationWithResponse(ctx context.Context, userId string, orgId string, reqEditors ...RequestEditorFn) (*GetUserShortInfoInOrganizationResponse, error) {
	rsp, err := c.GetUserShortInfoInOrganization(ctx, userId, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserShortInfoInOrganizationResponse(rsp)
}

// GetUserOrgsWithResponse request returning *GetUserOrgsResponse
func (c *ClientWithResponses) GetUserOrgsWithResponse(ctx context.Context, params *GetUserOrgsParams, reqEditors ...RequestEditorFn) (*GetUserOrgsResponse, error) {
	rsp, err := c.GetUserOrgs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserOrgsResponse(rsp)
}

// GetPaginatedOrgUsersInfoWithResponse request returning *GetPaginatedOrgUsersInfoResponse
func (c *ClientWithResponses) GetPaginatedOrgUsersInfoWithResponse(ctx context.Context, orgId string, params *GetPaginatedOrgUsersInfoParams, reqEditors ...RequestEditorFn) (*GetPaginatedOrgUsersInfoResponse, error) {
	rsp, err := c.GetPaginatedOrgUsersInfo(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaginatedOrgUsersInfoResponse(rsp)
}

// GetUserInAnyOrganizationWithResponse request returning *GetUserInAnyOrganizationResponse
func (c *ClientWithResponses) GetUserInAnyOrganizationWithResponse(ctx context.Context, userId string, params *GetUserInAnyOrganizationParams, reqEditors ...RequestEditorFn) (*GetUserInAnyOrganizationResponse, error) {
	rsp, err := c.GetUserInAnyOrganization(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserInAnyOrganizationResponse(rsp)
}

// GetUserInfoInOrganizationWithResponse request returning *GetUserInfoInOrganizationResponse
func (c *ClientWithResponses) GetUserInfoInOrganizationWithResponse(ctx context.Context, userId string, orgId string, reqEditors ...RequestEditorFn) (*GetUserInfoInOrganizationResponse, error) {
	rsp, err := c.GetUserInfoInOrganization(ctx, userId, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserInfoInOrganizationResponse(rsp)
}

// GetUserRolesInOrganizationWithResponse request returning *GetUserRolesInOrganizationResponse
func (c *ClientWithResponses) GetUserRolesInOrganizationWithResponse(ctx context.Context, userId string, orgId string, reqEditors ...RequestEditorFn) (*GetUserRolesInOrganizationResponse, error) {
	rsp, err := c.GetUserRolesInOrganization(ctx, userId, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserRolesInOrganizationResponse(rsp)
}

// GetUserServiceRolesInOrganizationWithResponse request returning *GetUserServiceRolesInOrganizationResponse
func (c *ClientWithResponses) GetUserServiceRolesInOrganizationWithResponse(ctx context.Context, userId string, orgId string, params *GetUserServiceRolesInOrganizationParams, reqEditors ...RequestEditorFn) (*GetUserServiceRolesInOrganizationResponse, error) {
	rsp, err := c.GetUserServiceRolesInOrganization(ctx, userId, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserServiceRolesInOrganizationResponse(rsp)
}

// PatchUserRolesOnOrganizationWithBodyWithResponse request with arbitrary body returning *PatchUserRolesOnOrganizationResponse
func (c *ClientWithResponses) PatchUserRolesOnOrganizationWithBodyWithResponse(ctx context.Context, userId string, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUserRolesOnOrganizationResponse, error) {
	rsp, err := c.PatchUserRolesOnOrganizationWithBody(ctx, userId, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUserRolesOnOrganizationResponse(rsp)
}

func (c *ClientWithResponses) PatchUserRolesOnOrganizationWithResponse(ctx context.Context, userId string, orgId string, body PatchUserRolesOnOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUserRolesOnOrganizationResponse, error) {
	rsp, err := c.PatchUserRolesOnOrganization(ctx, userId, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUserRolesOnOrganizationResponse(rsp)
}

// GetAllServiceDefinitionsWithResponse request returning *GetAllServiceDefinitionsResponse
func (c *ClientWithResponses) GetAllServiceDefinitionsWithResponse(ctx context.Context, params *GetAllServiceDefinitionsParams, reqEditors ...RequestEditorFn) (*GetAllServiceDefinitionsResponse, error) {
	rsp, err := c.GetAllServiceDefinitions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllServiceDefinitionsResponse(rsp)
}

// GetAllByOrgServiceDefinitions1WithResponse request returning *GetAllByOrgServiceDefinitions1Response
func (c *ClientWithResponses) GetAllByOrgServiceDefinitions1WithResponse(ctx context.Context, orgId string, params *GetAllByOrgServiceDefinitions1Params, reqEditors ...RequestEditorFn) (*GetAllByOrgServiceDefinitions1Response, error) {
	rsp, err := c.GetAllByOrgServiceDefinitions1(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllByOrgServiceDefinitions1Response(rsp)
}

// GetPagedServiceDefinitionOrgsWithResponse request returning *GetPagedServiceDefinitionOrgsResponse
func (c *ClientWithResponses) GetPagedServiceDefinitionOrgsWithResponse(ctx context.Context, serviceDefinitionId string, params *GetPagedServiceDefinitionOrgsParams, reqEditors ...RequestEditorFn) (*GetPagedServiceDefinitionOrgsResponse, error) {
	rsp, err := c.GetPagedServiceDefinitionOrgs(ctx, serviceDefinitionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPagedServiceDefinitionOrgsResponse(rsp)
}

// GetAllByOrgServiceDefinitionsWithResponse request returning *GetAllByOrgServiceDefinitionsResponse
func (c *ClientWithResponses) GetAllByOrgServiceDefinitionsWithResponse(ctx context.Context, orgId string, params *GetAllByOrgServiceDefinitionsParams, reqEditors ...RequestEditorFn) (*GetAllByOrgServiceDefinitionsResponse, error) {
	rsp, err := c.GetAllByOrgServiceDefinitions(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllByOrgServiceDefinitionsResponse(rsp)
}

// CheckIDTokenWithResponse request returning *CheckIDTokenResponse
func (c *ClientWithResponses) CheckIDTokenWithResponse(ctx context.Context, params *CheckIDTokenParams, reqEditors ...RequestEditorFn) (*CheckIDTokenResponse, error) {
	rsp, err := c.CheckIDToken(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckIDTokenResponse(rsp)
}

// ParseGetOpenidConfigurationResponse parses an HTTP response from a GetOpenidConfigurationWithResponse call
func ParseGetOpenidConfigurationResponse(rsp *http.Response) (*GetOpenidConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOpenidConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAccessTokenWithRefreshTokenResponse parses an HTTP response from a GetAccessTokenWithRefreshTokenWithResponse call
func ParseGetAccessTokenWithRefreshTokenResponse(rsp *http.Response) (*GetAccessTokenWithRefreshTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccessTokenWithRefreshTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAccessTokenWithAuthorizationRequestResponse parses an HTTP response from a GetAccessTokenWithAuthorizationRequestWithResponse call
func ParseGetAccessTokenWithAuthorizationRequestResponse(rsp *http.Response) (*GetAccessTokenWithAuthorizationRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccessTokenWithAuthorizationRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetKeysResponse parses an HTTP response from a GetKeysWithResponse call
func ParseGetKeysResponse(rsp *http.Response) (*GetKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLogoutResponse parses an HTTP response from a LogoutWithResponse call
func ParseLogoutResponse(rsp *http.Response) (*LogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAccessTokenPkceFlowResponse parses an HTTP response from a GetAccessTokenPkceFlowWithResponse call
func ParseGetAccessTokenPkceFlowResponse(rsp *http.Response) (*GetAccessTokenPkceFlowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccessTokenPkceFlowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest AccessToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest AccessToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPublicKeyResponse parses an HTTP response from a GetPublicKeyWithResponse call
func ParseGetPublicKeyResponse(rsp *http.Response) (*GetPublicKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSearchGroupsResponse parses an HTTP response from a SearchGroupsWithResponse call
func ParseSearchGroupsResponse(rsp *http.Response) (*SearchGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLoggedInUserResponse parses an HTTP response from a GetLoggedInUserWithResponse call
func ParseGetLoggedInUserResponse(rsp *http.Response) (*GetLoggedInUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLoggedInUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserDefaultOrgResponse parses an HTTP response from a GetUserDefaultOrgWithResponse call
func ParseGetUserDefaultOrgResponse(rsp *http.Response) (*GetUserDefaultOrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserDefaultOrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLoggedInUserDetailsResponse parses an HTTP response from a GetLoggedInUserDetailsWithResponse call
func ParseGetLoggedInUserDetailsResponse(rsp *http.Response) (*GetLoggedInUserDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLoggedInUserDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserOrgs1Response parses an HTTP response from a GetUserOrgs1WithResponse call
func ParseGetUserOrgs1Response(rsp *http.Response) (*GetUserOrgs1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserOrgs1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLoggedInUserGroupsOnOrgResponse parses an HTTP response from a GetLoggedInUserGroupsOnOrgWithResponse call
func ParseGetLoggedInUserGroupsOnOrgResponse(rsp *http.Response) (*GetLoggedInUserGroupsOnOrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLoggedInUserGroupsOnOrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserOrgInfoResponse parses an HTTP response from a GetUserOrgInfoWithResponse call
func ParseGetUserOrgInfoResponse(rsp *http.Response) (*GetUserOrgInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserOrgInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserOrgRolesResponse parses an HTTP response from a GetUserOrgRolesWithResponse call
func ParseGetUserOrgRolesResponse(rsp *http.Response) (*GetUserOrgRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserOrgRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserOrgServiceRolesResponse parses an HTTP response from a GetUserOrgServiceRolesWithResponse call
func ParseGetUserOrgServiceRolesResponse(rsp *http.Response) (*GetUserOrgServiceRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserOrgServiceRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPrincipalUserProfileResponse parses an HTTP response from a GetPrincipalUserProfileWithResponse call
func ParseGetPrincipalUserProfileResponse(rsp *http.Response) (*GetPrincipalUserProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPrincipalUserProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateUserProfileResponse parses an HTTP response from a UpdateUserProfileWithResponse call
func ParseUpdateUserProfileResponse(rsp *http.Response) (*UpdateUserProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateUserPreferencesResponse parses an HTTP response from a UpdateUserPreferencesWithResponse call
func ParseUpdateUserPreferencesResponse(rsp *http.Response) (*UpdateUserPreferencesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserPreferencesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLoginResponse parses an HTTP response from a LoginWithResponse call
func ParseLoginResponse(rsp *http.Response) (*LoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLoginOauthResponse parses an HTTP response from a LoginOauthWithResponse call
func ParseLoginOauthResponse(rsp *http.Response) (*LoginOauthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginOauthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetByIdResponse parses an HTTP response from a GetByIdWithResponse call
func ParseGetByIdResponse(rsp *http.Response) (*GetByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchOrgResponse parses an HTTP response from a PatchOrgWithResponse call
func ParsePatchOrgResponse(rsp *http.Response) (*PatchOrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRemoveGroupsFromOrganizationResponse parses an HTTP response from a RemoveGroupsFromOrganizationWithResponse call
func ParseRemoveGroupsFromOrganizationResponse(rsp *http.Response) (*RemoveGroupsFromOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveGroupsFromOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrganizationGroupsResponse parses an HTTP response from a GetOrganizationGroupsWithResponse call
func ParseGetOrganizationGroupsResponse(rsp *http.Response) (*GetOrganizationGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSearchOrgGroupsResponse parses an HTTP response from a SearchOrgGroupsWithResponse call
func ParseSearchOrgGroupsResponse(rsp *http.Response) (*SearchOrgGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchOrgGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetNestedGroupsFromADGroupResponse parses an HTTP response from a GetNestedGroupsFromADGroupWithResponse call
func ParseGetNestedGroupsFromADGroupResponse(rsp *http.Response) (*GetNestedGroupsFromADGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNestedGroupsFromADGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGroupRolesOnOrganizationResponse parses an HTTP response from a GetGroupRolesOnOrganizationWithResponse call
func ParseGetGroupRolesOnOrganizationResponse(rsp *http.Response) (*GetGroupRolesOnOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupRolesOnOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateGroupRolesOnOrganizationResponse parses an HTTP response from a UpdateGroupRolesOnOrganizationWithResponse call
func ParseUpdateGroupRolesOnOrganizationResponse(rsp *http.Response) (*UpdateGroupRolesOnOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateGroupRolesOnOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPaginatedGroupUsersResponse parses an HTTP response from a GetPaginatedGroupUsersWithResponse call
func ParseGetPaginatedGroupUsersResponse(rsp *http.Response) (*GetPaginatedGroupUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPaginatedGroupUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteOrgScopedOAuthClientResponse parses an HTTP response from a DeleteOrgScopedOAuthClientWithResponse call
func ParseDeleteOrgScopedOAuthClientResponse(rsp *http.Response) (*DeleteOrgScopedOAuthClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgScopedOAuthClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateOrgScopedOAuthClientResponse parses an HTTP response from a CreateOrgScopedOAuthClientWithResponse call
func ParseCreateOrgScopedOAuthClientResponse(rsp *http.Response) (*CreateOrgScopedOAuthClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrgScopedOAuthClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrgScopedOAuthClientResponse parses an HTTP response from a GetOrgScopedOAuthClientWithResponse call
func ParseGetOrgScopedOAuthClientResponse(rsp *http.Response) (*GetOrgScopedOAuthClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgScopedOAuthClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrgRolesResponse parses an HTTP response from a GetOrgRolesWithResponse call
func ParseGetOrgRolesResponse(rsp *http.Response) (*GetOrgRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchOrgRolesResponse parses an HTTP response from a PatchOrgRolesWithResponse call
func ParsePatchOrgRolesResponse(rsp *http.Response) (*PatchOrgRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRoleByOrgIdAndRoleIdResponse parses an HTTP response from a GetRoleByOrgIdAndRoleIdWithResponse call
func ParseGetRoleByOrgIdAndRoleIdResponse(rsp *http.Response) (*GetRoleByOrgIdAndRoleIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRoleByOrgIdAndRoleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrgSubOrgsResponse parses an HTTP response from a GetOrgSubOrgsWithResponse call
func ParseGetOrgSubOrgsResponse(rsp *http.Response) (*GetOrgSubOrgsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgSubOrgsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPaginatedOrgUsersInfo1Response parses an HTTP response from a GetPaginatedOrgUsersInfo1WithResponse call
func ParseGetPaginatedOrgUsersInfo1Response(rsp *http.Response) (*GetPaginatedOrgUsersInfo1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPaginatedOrgUsersInfo1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSearchUsersResponse parses an HTTP response from a SearchUsersWithResponse call
func ParseSearchUsersResponse(rsp *http.Response) (*SearchUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAccessTokenInfoResponse parses an HTTP response from a GetAccessTokenInfoWithResponse call
func ParseGetAccessTokenInfoResponse(rsp *http.Response) (*GetAccessTokenInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccessTokenInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserInAnyOrganization1Response parses an HTTP response from a GetUserInAnyOrganization1WithResponse call
func ParseGetUserInAnyOrganization1Response(rsp *http.Response) (*GetUserInAnyOrganization1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserInAnyOrganization1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserInfoInOrganization1Response parses an HTTP response from a GetUserInfoInOrganization1WithResponse call
func ParseGetUserInfoInOrganization1Response(rsp *http.Response) (*GetUserInfoInOrganization1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserInfoInOrganization1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserRolesOnOrgWithGroupInfoResponse parses an HTTP response from a GetUserRolesOnOrgWithGroupInfoWithResponse call
func ParseGetUserRolesOnOrgWithGroupInfoResponse(rsp *http.Response) (*GetUserRolesOnOrgWithGroupInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserRolesOnOrgWithGroupInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserRolesInOrganization1Response parses an HTTP response from a GetUserRolesInOrganization1WithResponse call
func ParseGetUserRolesInOrganization1Response(rsp *http.Response) (*GetUserRolesInOrganization1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserRolesInOrganization1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchUserRolesInOrganizationResponse parses an HTTP response from a PatchUserRolesInOrganizationWithResponse call
func ParsePatchUserRolesInOrganizationResponse(rsp *http.Response) (*PatchUserRolesInOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchUserRolesInOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserServiceRolesInOrganization1Response parses an HTTP response from a GetUserServiceRolesInOrganization1WithResponse call
func ParseGetUserServiceRolesInOrganization1Response(rsp *http.Response) (*GetUserServiceRolesInOrganization1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserServiceRolesInOrganization1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchUserServiceRolesInOrganizationResponse parses an HTTP response from a PatchUserServiceRolesInOrganizationWithResponse call
func ParsePatchUserServiceRolesInOrganizationResponse(rsp *http.Response) (*PatchUserServiceRolesInOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchUserServiceRolesInOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserShortInfoInOrganizationResponse parses an HTTP response from a GetUserShortInfoInOrganizationWithResponse call
func ParseGetUserShortInfoInOrganizationResponse(rsp *http.Response) (*GetUserShortInfoInOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserShortInfoInOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserOrgsResponse parses an HTTP response from a GetUserOrgsWithResponse call
func ParseGetUserOrgsResponse(rsp *http.Response) (*GetUserOrgsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserOrgsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPaginatedOrgUsersInfoResponse parses an HTTP response from a GetPaginatedOrgUsersInfoWithResponse call
func ParseGetPaginatedOrgUsersInfoResponse(rsp *http.Response) (*GetPaginatedOrgUsersInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPaginatedOrgUsersInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserInAnyOrganizationResponse parses an HTTP response from a GetUserInAnyOrganizationWithResponse call
func ParseGetUserInAnyOrganizationResponse(rsp *http.Response) (*GetUserInAnyOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserInAnyOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserInfoInOrganizationResponse parses an HTTP response from a GetUserInfoInOrganizationWithResponse call
func ParseGetUserInfoInOrganizationResponse(rsp *http.Response) (*GetUserInfoInOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserInfoInOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserRolesInOrganizationResponse parses an HTTP response from a GetUserRolesInOrganizationWithResponse call
func ParseGetUserRolesInOrganizationResponse(rsp *http.Response) (*GetUserRolesInOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserRolesInOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserServiceRolesInOrganizationResponse parses an HTTP response from a GetUserServiceRolesInOrganizationWithResponse call
func ParseGetUserServiceRolesInOrganizationResponse(rsp *http.Response) (*GetUserServiceRolesInOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserServiceRolesInOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchUserRolesOnOrganizationResponse parses an HTTP response from a PatchUserRolesOnOrganizationWithResponse call
func ParsePatchUserRolesOnOrganizationResponse(rsp *http.Response) (*PatchUserRolesOnOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchUserRolesOnOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAllServiceDefinitionsResponse parses an HTTP response from a GetAllServiceDefinitionsWithResponse call
func ParseGetAllServiceDefinitionsResponse(rsp *http.Response) (*GetAllServiceDefinitionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllServiceDefinitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAllByOrgServiceDefinitions1Response parses an HTTP response from a GetAllByOrgServiceDefinitions1WithResponse call
func ParseGetAllByOrgServiceDefinitions1Response(rsp *http.Response) (*GetAllByOrgServiceDefinitions1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllByOrgServiceDefinitions1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPagedServiceDefinitionOrgsResponse parses an HTTP response from a GetPagedServiceDefinitionOrgsWithResponse call
func ParseGetPagedServiceDefinitionOrgsResponse(rsp *http.Response) (*GetPagedServiceDefinitionOrgsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPagedServiceDefinitionOrgsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAllByOrgServiceDefinitionsResponse parses an HTTP response from a GetAllByOrgServiceDefinitionsWithResponse call
func ParseGetAllByOrgServiceDefinitionsResponse(rsp *http.Response) (*GetAllByOrgServiceDefinitionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllByOrgServiceDefinitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCheckIDTokenResponse parses an HTTP response from a CheckIDTokenWithResponse call
func ParseCheckIDTokenResponse(rsp *http.Response) (*CheckIDTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckIDTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
