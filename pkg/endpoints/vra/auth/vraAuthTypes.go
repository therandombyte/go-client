// Package vra8 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package vra8

import (
	"time"
)

const (
	BasicAuthScopes  = "BasicAuth.Scopes"
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for BaseRoleBindingMembershipType.
const (
	BaseRoleBindingMembershipTypeDIRECT BaseRoleBindingMembershipType = "DIRECT"
	BaseRoleBindingMembershipTypeGROUP  BaseRoleBindingMembershipType = "GROUP"
)

// Defines values for ExpandedGroupGroupType.
const (
	ExpandedGroupGroupTypeADGROUP     ExpandedGroupGroupType = "AD_GROUP"
	ExpandedGroupGroupTypeDOMAINGROUP ExpandedGroupGroupType = "DOMAIN_GROUP"
	ExpandedGroupGroupTypeUSERGROUP   ExpandedGroupGroupType = "USER_GROUP"
)

// Defines values for GroupGroupType.
const (
	GroupGroupTypeADGROUP     GroupGroupType = "AD_GROUP"
	GroupGroupTypeDOMAINGROUP GroupGroupType = "DOMAIN_GROUP"
	GroupGroupTypeUSERGROUP   GroupGroupType = "USER_GROUP"
)

// Defines values for OrgRoleMembershipType.
const (
	OrgRoleMembershipTypeDIRECT OrgRoleMembershipType = "DIRECT"
	OrgRoleMembershipTypeGROUP  OrgRoleMembershipType = "GROUP"
)

// Defines values for OrganizationRoleBindingWithGroupsMembershipType.
const (
	OrganizationRoleBindingWithGroupsMembershipTypeDIRECT OrganizationRoleBindingWithGroupsMembershipType = "DIRECT"
	OrganizationRoleBindingWithGroupsMembershipTypeGROUP  OrganizationRoleBindingWithGroupsMembershipType = "GROUP"
)

// Defines values for ServiceRoleBindingMembershipType.
const (
	ServiceRoleBindingMembershipTypeDIRECT ServiceRoleBindingMembershipType = "DIRECT"
	ServiceRoleBindingMembershipTypeGROUP  ServiceRoleBindingMembershipType = "GROUP"
)

// Defines values for ServiceRoleBindingWithGroupsMembershipType.
const (
	DIRECT ServiceRoleBindingWithGroupsMembershipType = "DIRECT"
	GROUP  ServiceRoleBindingWithGroupsMembershipType = "GROUP"
)

// Defines values for GetPublicKeyParamsThePublicKeyFormat.
const (
	JwksPem GetPublicKeyParamsThePublicKeyFormat = "jwks, pem"
)

// AccessToken defines model for AccessToken.
type AccessToken struct {
	// AccessToken Access Token
	AccessToken *string `json:"access_token,omitempty"`

	// ExpiresIn Access Token Expiration
	ExpiresIn *int64 `json:"expires_in,omitempty"`

	// IdToken ID Token
	IdToken *string `json:"id_token,omitempty"`

	// RefreshToken Refresh Token
	RefreshToken *string `json:"refresh_token,omitempty"`

	// Scope Scope
	Scope *string `json:"scope,omitempty"`

	// TokenType Token Type
	TokenType *string `json:"token_type,omitempty"`
}

// AllServiceDefinitionsResponse defines model for AllServiceDefinitionsResponse.
type AllServiceDefinitionsResponse struct {
	Results                *[]ServiceDefinitionResponse `json:"results,omitempty"`
	ServiceDefinitionLinks *[]string                    `json:"serviceDefinitionLinks,omitempty"`
}

// AllowedScopes Roles and service roles to be granted to this client.
type AllowedScopes struct {
	// AllRoles For CSP compatibility, ignored by the Identity Service.
	AllRoles *bool `json:"allRoles,omitempty"`

	// GeneralScopes For CSP compatibility, ignored by the Identity Service.
	GeneralScopes *[]string `json:"generalScopes,omitempty"`

	// OrganizationScopes Roles to be granted.
	OrganizationScopes *OrganizationScopes `json:"organizationScopes,omitempty"`

	// ServicesScopes Service roles to be granted.
	ServicesScopes *[]ServiceScopes `json:"servicesScopes,omitempty"`
}

// AuthorizationByRefreshTokenRequest defines model for AuthorizationByRefreshTokenRequest.
type AuthorizationByRefreshTokenRequest struct {
	// ApiToken The API-token
	ApiToken *string `json:"api_token,omitempty"`

	// RefreshToken The refresh token. Deprecated, need to use api_token
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// AuthorizationRequest defines model for AuthorizationRequest.
type AuthorizationRequest struct {
	// ClientId The client ID when <code>grant_type</code> is set to <code>client_credentials</code>. Will be ignored if the <code>Authorization</code> header is set.
	ClientId *string `json:"client_id,omitempty"`

	// ClientSecret The client secret when <code>grant_type</code> is set to <code>client_credentials</code>. Will be ignored if the <code>Authorization</code> header is set.
	ClientSecret *string `json:"client_secret,omitempty"`

	// Code The authorization code when <code>grant_type</code> is set to <code>authorization_code</code>
	Code *string `json:"code,omitempty"`

	// GrantType The type of authorization to be performed.
	GrantType string `json:"grant_type"`

	// OrgId When <code>grant_type</code> is set to <code>client_credentials</code> if this parameter is set the issued token will be limited to the specified organization.
	OrgId *string `json:"orgId,omitempty"`

	// RedirectUri The URI to which a redirect will be performed upon successful authorization.
	RedirectUri *string `json:"redirect_uri,omitempty"`

	// RefreshToken The refresh token when <code>grant_type</code> is set to <code>refresh_token</code>
	RefreshToken *string `json:"refresh_token,omitempty"`

	// Scope Currently not supported. Present for CSP compatibility.
	Scope *string `json:"scope,omitempty"`

	// State A transparent state of the request.
	State string `json:"state"`
}

// BaseRole defines model for BaseRole.
type BaseRole struct {
	// Id The identifier of the role.
	Id *string `json:"id,omitempty"`

	// Name The name of the role.
	Name *string `json:"name,omitempty"`
}

// BaseRoleBinding Roles to remove
type BaseRoleBinding struct {
	// ExpiresAt The timestamp the role expires at (measured in number of seconds since 1/1/1970 UTC). The property is ignored by the identity service.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Id The identifier of the role.
	Id *string `json:"id,omitempty"`

	// MembershipType Membership type of the member in the organization.
	// DIRECT: if the member roles were assigned directly.
	// GROUP: if the member roles were assigned through enterprise group.
	MembershipType *BaseRoleBindingMembershipType `json:"membershipType,omitempty"`

	// Name The name of the role.
	Name *string `json:"name,omitempty"`
}

// BaseRoleBindingMembershipType Membership type of the member in the organization.
// DIRECT: if the member roles were assigned directly.
// GROUP: if the member roles were assigned through enterprise group.
type BaseRoleBindingMembershipType string

// BaseScope For CSP compatibility, ignored by the Identity Service.
type BaseScope struct {
	// Name For CSP compatibility, ignored by the Identity Service.
	Name *string `json:"name,omitempty"`
}

// BaseUser The list of results.
type BaseUser struct {
	Accessible *bool   `json:"accessible,omitempty"`
	Acct       *string `json:"acct,omitempty"`
	Domain     *string `json:"domain,omitempty"`
	Email      *string `json:"email,omitempty"`
	FirstName  *string `json:"firstName,omitempty"`
	IdpId      *string `json:"idpId,omitempty"`
	LastName   *string `json:"lastName,omitempty"`
	UserId     *string `json:"userId,omitempty"`
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	Username *string `json:"username,omitempty"`
}

// BaseUserWithProfile Base User With Profile data.
type BaseUserWithProfile struct {
	Accessible  *bool                  `json:"accessible,omitempty"`
	Acct        *string                `json:"acct,omitempty"`
	Domain      *string                `json:"domain,omitempty"`
	Email       *string                `json:"email,omitempty"`
	FirstName   *string                `json:"firstName,omitempty"`
	IdpId       *string                `json:"idpId,omitempty"`
	LastName    *string                `json:"lastName,omitempty"`
	UserId      *string                `json:"userId,omitempty"`
	UserProfile *UserLocalePreferences `json:"userProfile,omitempty"`
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	Username *string `json:"username,omitempty"`
}

// ClientAndSecretResponse defines model for ClientAndSecretResponse.
type ClientAndSecretResponse struct {
	// ClientId The client ID.
	ClientId *string `json:"clientId,omitempty"`

	// ClientSecret The client secret.
	ClientSecret *string `json:"clientSecret,omitempty"`
}

// DeleteClientsRequest defines model for DeleteClientsRequest.
type DeleteClientsRequest struct {
	// ClientIdsToDelete A set of client IDs to delete.
	ClientIdsToDelete *[]string `json:"clientIdsToDelete,omitempty"`
}

// ExpandedGroup The list of results.
type ExpandedGroup struct {
	// DisplayName The group display name.
	DisplayName *string `json:"displayName,omitempty"`

	// Domain The group domain.
	Domain *string `json:"domain,omitempty"`

	// GroupType USER_GROUP is an organization specific custom group, AD_GROUP is a federated domain group
	GroupType *ExpandedGroupGroupType `json:"groupType,omitempty"`

	// Id The group ID.
	Id                *string             `json:"id,omitempty"`
	OrganizationRoles *[]OrganizationRole `json:"organizationRoles,omitempty"`
	ServiceRoles      *[]ServiceRoleNames `json:"serviceRoles,omitempty"`

	// UsersCount The number of users members of this group.
	UsersCount *int32 `json:"usersCount,omitempty"`
}

// ExpandedGroupGroupType USER_GROUP is an organization specific custom group, AD_GROUP is a federated domain group
type ExpandedGroupGroupType string

// ExpandedTypedUser The list of results.
type ExpandedTypedUser struct {
	// OrgId Unique identifier (GUID) of the organization.
	OrgId *string `json:"orgId,omitempty"`

	// OrganizationRoles List of organization role objects.
	OrganizationRoles *[]OrganizationRoleBindingWithGroups `json:"organizationRoles,omitempty"`

	// ServiceRoles List of services roles objects.
	ServiceRoles *[]ServiceRolesWithGroupsCollection `json:"serviceRoles,omitempty"`

	// User Base User With Profile data.
	User *BaseUserWithProfile `json:"user,omitempty"`
}

// Group defines model for Group.
type Group struct {
	// DisplayName The group display name.
	DisplayName *string `json:"displayName,omitempty"`

	// Domain The group domain.
	Domain *string `json:"domain,omitempty"`

	// GroupType USER_GROUP is an organization specific custom group, AD_GROUP is a federated domain group
	GroupType *GroupGroupType `json:"groupType,omitempty"`

	// Id The group ID.
	Id *string `json:"id,omitempty"`

	// UsersCount The number of users members of this group.
	UsersCount *int32 `json:"usersCount,omitempty"`
}

// GroupGroupType USER_GROUP is an organization specific custom group, AD_GROUP is a federated domain group
type GroupGroupType string

// GroupRolesResponse defines model for GroupRolesResponse.
type GroupRolesResponse struct {
	OrganizationRoles *[]OrgRole        `json:"organizationRoles,omitempty"`
	ServiceRoles      *[]OrgServiceRole `json:"serviceRoles,omitempty"`
}

// IdTokenRequest defines model for IdTokenRequest.
type IdTokenRequest struct {
	// IdToken The ID token.
	IdToken string `json:"idToken"`
}

// IdTokenResponse defines model for IdTokenResponse.
type IdTokenResponse struct {
	// Acct The user's account identifier, the acct claim can be a combination of the user's username and domain in URLEncoded(username)@domain format or the user's email or the UPN of the user.
	Acct *string `json:"acct,omitempty"`

	// Aud The list of audience(s). OAuth client(s) the token is issued to.
	Aud *[]string `json:"aud,omitempty"`

	// AuthTime Timestamp, measured in number of seconds since 1/1/1970 UTC, indicating when the user was originally authenticated.
	AuthTime *int64 `json:"auth_time,omitempty"`

	// Context The context in which the token was issued.
	Context *string `json:"context,omitempty"`

	// ContextName The context name in which the token was issued.
	ContextName *string `json:"context_name,omitempty"`

	// Domain The domain the user belongs to.
	Domain *string `json:"domain,omitempty"`

	// Email The user's email.
	Email *string `json:"email,omitempty"`

	// EmailVerified True if the user's e-mail address has been verified; otherwise false.
	EmailVerified *bool `json:"email_verified,omitempty"`

	// Exp Timestamp, measured in number of seconds since 1/1/1970 UTC, indicating when the token will expire.
	Exp *int64 `json:"exp,omitempty"`

	// FamilyName The user's family name.
	FamilyName *string `json:"family_name,omitempty"`

	// GivenName The user's given name.
	GivenName *string `json:"given_name,omitempty"`

	// GroupIds Identifiers of the groups the user belongs to.
	GroupIds *[]string `json:"group_ids,omitempty"`

	// GroupNames Names of the groups the user belongs to.
	GroupNames *[]string `json:"group_names,omitempty"`

	// Iat Timestamp, measured in number of seconds since 1/1/1970 UTC, indicating when the token was issued.
	Iat *int64 `json:"iat,omitempty"`

	// Iss The issuer of the token (URL of Identity Service).
	Iss *string `json:"iss,omitempty"`

	// Sub The user on behalf of which the token was issued.
	Sub *string `json:"sub,omitempty"`

	// Username The user's username.
	Username *string `json:"username,omitempty"`
}

// IdpUserDetails defines model for IdpUserDetails.
type IdpUserDetails struct {
	Address        *string `json:"address,omitempty"`
	City           *string `json:"city,omitempty"`
	Company        *string `json:"company,omitempty"`
	Country        *string `json:"country,omitempty"`
	CustomerNumber *string `json:"customerNumber,omitempty"`
	State          *string `json:"state,omitempty"`
	WorkPhone      *string `json:"workPhone,omitempty"`
	ZipCode        *string `json:"zipCode,omitempty"`
}

// LeanUserProfile defines model for LeanUserProfile.
type LeanUserProfile struct {
	CustomerNumber      *string `json:"customerNumber,omitempty"`
	DefaultOrgId        *string `json:"defaultOrgId,omitempty"`
	IsFederated         *bool   `json:"isFederated,omitempty"`
	Language            *string `json:"language,omitempty"`
	LinkedUserIdAccount *string `json:"linkedUserIdAccount,omitempty"`
	Locale              *string `json:"locale,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	// Domain The user's domain.
	Domain *string `json:"domain,omitempty"`

	// Password The password.
	Password string `json:"password"`

	// Scope Scope of the issued token.
	Scope *string `json:"scope,omitempty"`

	// Username The username.
	Username string `json:"username"`
}

// OpenidConfigurationResponse The OpenID configuration document as defined by the specification: http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata. This is also compliant with the https://tools.ietf.org/html/draft-ietf-oauth-discovery-08 specification.
type OpenidConfigurationResponse struct {
	AuthorizationEndpoint             *string   `json:"authorization_endpoint,omitempty"`
	ClaimsSupported                   *[]string `json:"claims_supported,omitempty"`
	CodeChallengeMethodsSupported     *[]string `json:"code_challenge_methods_supported,omitempty"`
	EndSessionEndpoint                *string   `json:"end_session_endpoint,omitempty"`
	IdTokenSigningAlgValuesSupported  *[]string `json:"id_token_signing_alg_values_supported,omitempty"`
	Issuer                            *string   `json:"issuer,omitempty"`
	JwksUri                           *string   `json:"jwks_uri,omitempty"`
	ResponseTypesSupported            *[]string `json:"response_types_supported,omitempty"`
	ScopesSupported                   *[]string `json:"scopes_supported,omitempty"`
	SubjectTypesSupported             *[]string `json:"subject_types_supported,omitempty"`
	TokenEndpoint                     *string   `json:"token_endpoint,omitempty"`
	TokenEndpointAuthMethodsSupported *[]string `json:"token_endpoint_auth_methods_supported,omitempty"`
	UserinfoEndpoint                  *string   `json:"userinfo_endpoint,omitempty"`
}

// OrgOAuthAppRequest Organization OAuth App Creation Request
type OrgOAuthAppRequest struct {
	// AccessTokenTTL Time to live for the access token, generated for this client, in seconds. Defaults to 0 if not set, i.e. the token will be issued already expired.
	AccessTokenTTL *int32 `json:"accessTokenTTL,omitempty"`

	// AllowedScopes Roles and service roles to be granted to this client.
	AllowedScopes *AllowedScopes `json:"allowedScopes,omitempty"`

	// Description Description for the client.
	Description *string `json:"description,omitempty"`

	// DisplayName Display name for the client.
	DisplayName *string `json:"displayName,omitempty"`

	// GrantTypes Client grant types.
	GrantTypes *[]string `json:"grantTypes,omitempty"`

	// Id The client ID. If not set one will be generated.
	Id *string `json:"id,omitempty"`

	// MaxGroupsInIdToken For CSP compatibility, ignored by the Identity Service. Note that the value will be persisted and may become effective in the future releases.
	MaxGroupsInIdToken *int32 `json:"maxGroupsInIdToken,omitempty"`

	// RedirectUris Redirect URIs for the client. Only the first one will be taken into account by the Identity Service.
	RedirectUris *[]string `json:"redirectUris,omitempty"`

	// RefreshTokenTTL Time to live for the refresh token, generated for this client, in seconds. Defaults to 0 if not set, i.e. the token will be issued already expired.
	RefreshTokenTTL *int32 `json:"refreshTokenTTL,omitempty"`

	// Secret The client secret. If not set one will be generated.
	Secret *string `json:"secret,omitempty"`
}

// OrgOAuthAppResponse defines model for OrgOAuthAppResponse.
type OrgOAuthAppResponse struct {
	AccessTokenTTL     *int32                 `json:"accessTokenTTL,omitempty"`
	AllowedOrgs        *[]OrganizationDetails `json:"allowedOrgs,omitempty"`
	CreatedAt          *int64                 `json:"createdAt,omitempty"`
	Description        *string                `json:"description,omitempty"`
	DisplayName        *string                `json:"displayName,omitempty"`
	GrantTypes         *[]string              `json:"grantTypes,omitempty"`
	Id                 *string                `json:"id,omitempty"`
	LastUpdatedAt      *int64                 `json:"lastUpdatedAt,omitempty"`
	MaxGroupsInIdToken *int32                 `json:"maxGroupsInIdToken,omitempty"`
	OrganizationId     *string                `json:"organizationId,omitempty"`
	RedirectUris       *[]string              `json:"redirectUris,omitempty"`
	RefreshTokenTTL    *int32                 `json:"refreshTokenTTL,omitempty"`
}

// OrgRole defines model for OrgRole.
type OrgRole struct {
	// DisplayName The organization role display name.
	DisplayName *string `json:"displayName,omitempty"`

	// ExpiresAt The timestamp the role expires at (measured in number of seconds since 1/1/1970 UTC). The property is ignored by the identity service.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Id The identifier of the role.
	Id *string `json:"id,omitempty"`

	// MembershipType Membership type of the member in the organization.
	// DIRECT: if the member roles were assigned directly.
	// GROUP: if the member roles were assigned through enterprise group.
	MembershipType *OrgRoleMembershipType `json:"membershipType,omitempty"`

	// Name The name of the role.
	Name *string `json:"name,omitempty"`

	// OrgId The organization id in which the role is assigned.
	OrgId *string `json:"orgId,omitempty"`
}

// OrgRoleMembershipType Membership type of the member in the organization.
// DIRECT: if the member roles were assigned directly.
// GROUP: if the member roles were assigned through enterprise group.
type OrgRoleMembershipType string

// OrgRoleRequest Organization roles to be updated.
type OrgRoleRequest struct {
	// RoleNamesToAdd Deprecated: Role names to add (use rolesToAdd instead)
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	RoleNamesToAdd *[]string `json:"roleNamesToAdd,omitempty"`

	// RoleNamesToRemove Deprecated: Role names to remove (use rolesToRemove instead)
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	RoleNamesToRemove *[]string `json:"roleNamesToRemove,omitempty"`

	// RolesToAdd The roles to add.
	RolesToAdd *[]BaseRole `json:"rolesToAdd,omitempty"`

	// RolesToRemove The roles to remove.
	RolesToRemove *[]BaseRole `json:"rolesToRemove,omitempty"`
}

// OrgServiceRole defines model for OrgServiceRole.
type OrgServiceRole struct {
	// ServiceDefinitionId The service definition id (without "external" prefix).
	ServiceDefinitionId *string `json:"serviceDefinitionId,omitempty"`

	// ServiceRoleNames Deprecated: The service role names (use serviceRoles instead).
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	ServiceRoleNames *[]string `json:"serviceRoleNames,omitempty"`

	// ServiceRoles List of services roles objects.
	ServiceRoles *[]ServiceRoleBinding `json:"serviceRoles,omitempty"`
}

// OrgServiceRoleRequest defines model for OrgServiceRoleRequest.
type OrgServiceRoleRequest struct {
	// RoleNamesToAdd Deprecated: Role names to add (use rolesToAdd instead)
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	RoleNamesToAdd *[]string `json:"roleNamesToAdd,omitempty"`

	// RoleNamesToRemove Deprecated: Role names to remove (use rolesToRemove instead)
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	RoleNamesToRemove *[]string `json:"roleNamesToRemove,omitempty"`

	// RolesToAdd The roles to add.
	RolesToAdd *[]BaseRole `json:"rolesToAdd,omitempty"`

	// RolesToRemove The roles to remove.
	RolesToRemove       *[]BaseRole `json:"rolesToRemove,omitempty"`
	ServiceDefinitionId *string     `json:"serviceDefinitionId,omitempty"`
}

// OrganizationDetails defines model for OrganizationDetails.
type OrganizationDetails struct {
	DisplayName *string `json:"displayName,omitempty"`
	Id          *string `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// OrganizationResponse defines model for OrganizationResponse.
type OrganizationResponse struct {
	DisplayName   *string            `json:"displayName,omitempty"`
	Id            *string            `json:"id,omitempty"`
	Metadata      *map[string]string `json:"metadata,omitempty"`
	Name          *string            `json:"name,omitempty"`
	ParentRefLink *string            `json:"parentRefLink,omitempty"`
	RefLink       *string            `json:"refLink,omitempty"`
}

// OrganizationRole defines model for OrganizationRole.
type OrganizationRole struct {
	DisplayName *string `json:"displayName,omitempty"`
	Id          *string `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
	OrgId       *string `json:"orgId,omitempty"`
}

// OrganizationRoleBindingWithGroups defines model for OrganizationRoleBindingWithGroups.
type OrganizationRoleBindingWithGroups struct {
	// DisplayName The organization role display name
	DisplayName *string `json:"displayName,omitempty"`

	// ExpiresAt The timestamp the role expires at (measured in number of seconds since 1/1/1970 UTC). The property is ignored by the identity service.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// GroupIds List of group unique identifiers related to role.
	GroupIds *[]string `json:"groupIds,omitempty"`

	// Groups List of group objects related to role.
	Groups *[]Group `json:"groups,omitempty"`

	// Id The identifier of the role.
	Id *string `json:"id,omitempty"`

	// MembershipType Membership type of the member in the organization.
	// DIRECT: if the member roles were assigned directly.
	// GROUP: if the member roles were assigned through enterprise group.
	MembershipType *OrganizationRoleBindingWithGroupsMembershipType `json:"membershipType,omitempty"`

	// Name The name of the role.
	Name *string `json:"name,omitempty"`

	// OrgId The organization id in which the role is assigned
	OrgId *string `json:"orgId,omitempty"`
}

// OrganizationRoleBindingWithGroupsMembershipType Membership type of the member in the organization.
// DIRECT: if the member roles were assigned directly.
// GROUP: if the member roles were assigned through enterprise group.
type OrganizationRoleBindingWithGroupsMembershipType string

// OrganizationRolesResponse defines model for OrganizationRolesResponse.
type OrganizationRolesResponse struct {
	OrgRolesData *[]RoleResponse `json:"orgRolesData,omitempty"`
	RefLinks     *[]string       `json:"refLinks,omitempty"`
}

// OrganizationScopes Roles to be granted.
type OrganizationScopes struct {
	// AllRoles For CSP compatibility, ignored by the Identity Service.
	AllRoles *bool `json:"allRoles,omitempty"`

	// RoleNames List of role role/service role names to add.
	RoleNames *[]string `json:"roleNames,omitempty"`

	// Roles For CSP compatibility, ignored by the Identity Service.
	Roles *[]BaseScope `json:"roles,omitempty"`
}

// Organizations defines model for Organizations.
type Organizations struct {
	Items    *[]OrganizationResponse `json:"items,omitempty"`
	RefLinks *[]string               `json:"refLinks,omitempty"`
}

// PagedResponseBaseUser defines model for PagedResponseBaseUser.
type PagedResponseBaseUser struct {
	// NextLink URL to the next page of results.
	NextLink *string `json:"nextLink,omitempty"`

	// PrevLink URL to the previous page of result.
	PrevLink *string `json:"prevLink,omitempty"`

	// Results The list of results.
	Results *[]BaseUser `json:"results,omitempty"`

	// TotalResults The total number of results on all pages.
	TotalResults *int64 `json:"totalResults,omitempty"`
}

// PagedResponseExpandedGroup defines model for PagedResponseExpandedGroup.
type PagedResponseExpandedGroup struct {
	// NextLink URL to the next page of results.
	NextLink *string `json:"nextLink,omitempty"`

	// PrevLink URL to the previous page of result.
	PrevLink *string `json:"prevLink,omitempty"`

	// Results The list of results.
	Results *[]ExpandedGroup `json:"results,omitempty"`

	// TotalResults The total number of results on all pages.
	TotalResults *int64 `json:"totalResults,omitempty"`
}

// PagedResponseExpandedTypedUser defines model for PagedResponseExpandedTypedUser.
type PagedResponseExpandedTypedUser struct {
	// NextLink URL to the next page of results.
	NextLink *string `json:"nextLink,omitempty"`

	// PrevLink URL to the previous page of result.
	PrevLink *string `json:"prevLink,omitempty"`

	// Results The list of results.
	Results *[]ExpandedTypedUser `json:"results,omitempty"`

	// TotalResults The total number of results on all pages.
	TotalResults *int64 `json:"totalResults,omitempty"`
}

// PagedResponseGroup defines model for PagedResponseGroup.
type PagedResponseGroup struct {
	// NextLink URL to the next page of results.
	NextLink *string `json:"nextLink,omitempty"`

	// PrevLink URL to the previous page of result.
	PrevLink *string `json:"prevLink,omitempty"`

	// Results The list of results.
	Results *[]Group `json:"results,omitempty"`

	// TotalResults The total number of results on all pages.
	TotalResults *int64 `json:"totalResults,omitempty"`
}

// PagedResponseOrganizationResponse defines model for PagedResponseOrganizationResponse.
type PagedResponseOrganizationResponse struct {
	// NextLink URL to the next page of results.
	NextLink *string `json:"nextLink,omitempty"`

	// PrevLink URL to the previous page of result.
	PrevLink *string `json:"prevLink,omitempty"`

	// Results The list of results.
	Results *[]OrganizationResponse `json:"results,omitempty"`

	// TotalResults The total number of results on all pages.
	TotalResults *int64 `json:"totalResults,omitempty"`
}

// PagedResponseServiceDefinitionOrgResponse defines model for PagedResponseServiceDefinitionOrgResponse.
type PagedResponseServiceDefinitionOrgResponse struct {
	// NextLink URL to the next page of results.
	NextLink *string `json:"nextLink,omitempty"`

	// PrevLink URL to the previous page of result.
	PrevLink *string `json:"prevLink,omitempty"`

	// Results The list of results.
	Results *[]ServiceDefinitionOrgResponse `json:"results,omitempty"`

	// TotalResults The total number of results on all pages.
	TotalResults *int64 `json:"totalResults,omitempty"`
}

// PagedResponseServiceDefinitionResponse defines model for PagedResponseServiceDefinitionResponse.
type PagedResponseServiceDefinitionResponse struct {
	// NextLink URL to the next page of results.
	NextLink *string `json:"nextLink,omitempty"`

	// PrevLink URL to the previous page of result.
	PrevLink *string `json:"prevLink,omitempty"`

	// Results The list of results.
	Results *[]ServiceDefinitionResponse `json:"results,omitempty"`

	// TotalResults The total number of results on all pages.
	TotalResults *int64 `json:"totalResults,omitempty"`
}

// PartialSuccessResponseString defines model for PartialSuccessResponseString.
type PartialSuccessResponseString struct {
	// Failed A set of the failed operations.
	Failed *[]string `json:"failed,omitempty"`

	// Succeeded A set of the successfully performed operations.
	Succeeded *[]string `json:"succeeded,omitempty"`
}

// PkceFlowAuthorizationRequest defines model for PkceFlowAuthorizationRequest.
type PkceFlowAuthorizationRequest struct {
	// Code Authorization code parameter. Mandatory for grant_type 'authorization_code'.
	Code *string `json:"code,omitempty"`

	// CodeVerifier A high-entropy cryptographic random key using the characters [A-Z] / [a-z] / [0-9] / '-' / '.' / '_' / '~' with a minimum length of 43 characters and a maximum length of 128 characters which was used to generate the 'code_challenge' and obtain the authorization code. Required if PKCE was used in the authorization code grant request. For more information, refer the PKCE RFC at https://tools.ietf.org/html/rfc7636.
	CodeVerifier *string `json:"code_verifier,omitempty"`

	// GrantType OAuth grant types for different use cases.
	GrantType string `json:"grant_type"`

	// OrgId Unique identifier (GUID) of the organization. Available for grant_type 'client_credentials'.
	OrgId *string `json:"org_id,omitempty"`

	// RedirectUri Service redirect uri. Mandatory for grant_type 'authorization_code'.
	RedirectUri *string `json:"redirect_uri,omitempty"`

	// RefreshToken Refresh token parameter. Available for grant_type 'refresh_token'.
	RefreshToken *string `json:"refresh_token,omitempty"`

	// Scope Currently not supported. Present for CSP compatibility.
	Scope *string `json:"scope,omitempty"`

	// SubjectToken Required if the grant_type is 'client_delegate'. A security token that represents the identity of the party on behalf of whom the request is being made. In client_delegate flow, the token provided MUST BE the access token of the user.
	SubjectToken *string `json:"subject_token,omitempty"`

	// SubjectTokenType Required if the grant_type is 'client_delegate'. The identifier for the subject token provided as per RFC 8693 https://tools.ietf.org/html/rfc8693#section-3. In 'client_delegate' flow, this value MUST BE 'urn:ietf:params:oauth:token-type:access_token'.
	SubjectTokenType *string `json:"subject_token_type,omitempty"`
}

// PublicKeyResponse defines model for PublicKeyResponse.
type PublicKeyResponse struct {
	// Alg The algorithm associated with the public key.
	Alg *string `json:"alg,omitempty"`

	// Issuer The issuer of the JWTs issued by the Identity service against which to validate the iss claim.
	Issuer *string `json:"issuer,omitempty"`

	// Keys The list of the currently valid public keys. Set in the case of <code>jwks</code> format. The model of this property is a <code>Map</code> of <code>JsonWebKey</code> objects.
	Keys *[]map[string]map[string]interface{} `json:"keys,omitempty"`

	// Value The public key. Set in the case of <code>pem</code> format.
	Value *string `json:"value,omitempty"`
}

// RefLink defines model for RefLink.
type RefLink struct {
	RefLink *string `json:"refLink,omitempty"`
}

// RemoveGroupsFromOrgRequest defines model for RemoveGroupsFromOrgRequest.
type RemoveGroupsFromOrgRequest struct {
	Ids                 *[]string `json:"ids,omitempty"`
	NotifyUsersInGroups *bool     `json:"notifyUsersInGroups,omitempty"`
}

// RemoveGroupsFromOrganizationFailure defines model for RemoveGroupsFromOrganizationFailure.
type RemoveGroupsFromOrganizationFailure struct {
	// Id The id of the entry for which an operation had failed
	Id *string `json:"id,omitempty"`

	// Message The reason for which the operation for this entry had failed.
	Message *string `json:"message,omitempty"`
}

// RemoveMembersFromOrgResponse defines model for RemoveMembersFromOrgResponse.
type RemoveMembersFromOrgResponse struct {
	Failed    *[]string                              `json:"failed,omitempty"`
	Failures  *[]RemoveGroupsFromOrganizationFailure `json:"failures,omitempty"`
	Succeeded *[]string                              `json:"succeeded,omitempty"`
}

// Role defines model for Role.
type Role struct {
	CreatedMillis    *int64   `json:"createdMillis,omitempty"`
	DisplayName      *string  `json:"displayName,omitempty"`
	GroupIds         []string `json:"groupIds"`
	Id               *string  `json:"id,omitempty"`
	Name             *string  `json:"name,omitempty"`
	OrgId            *string  `json:"orgId,omitempty"`
	OrganizationLink *string  `json:"organizationLink,omitempty"`
	RefLink          *string  `json:"refLink,omitempty"`
	UpdatedMillis    *int64   `json:"updatedMillis,omitempty"`
	UserIds          []string `json:"userIds"`
	Visible          *bool    `json:"visible,omitempty"`
}

// RoleResponse defines model for RoleResponse.
type RoleResponse struct {
	DisplayName      *string `json:"displayName,omitempty"`
	ExpiresAt        *int64  `json:"expiresAt,omitempty"`
	Id               *string `json:"id,omitempty"`
	Name             *string `json:"name,omitempty"`
	OrgId            *string `json:"orgId,omitempty"`
	OrganizationLink *string `json:"organizationLink,omitempty"`
	RefLink          *string `json:"refLink,omitempty"`
	Resource         *string `json:"resource,omitempty"`
	Visible          *bool   `json:"visible,omitempty"`
}

// RolesWithGroupInfo defines model for RolesWithGroupInfo.
type RolesWithGroupInfo struct {
	// OrganizationRoles The organization roles
	OrganizationRoles *[]OrganizationRoleBindingWithGroups `json:"organizationRoles,omitempty"`

	// ServiceRoles The services roles
	ServiceRoles *[]ServiceRolesWithGroupsCollection `json:"serviceRoles,omitempty"`
}

// SearchGroupsResponse defines model for SearchGroupsResponse.
type SearchGroupsResponse struct {
	Results []ExpandedGroup `json:"results"`
}

// SearchUsersResponse defines model for SearchUsersResponse.
type SearchUsersResponse struct {
	// Results List of users that are found.
	Results *[]ExpandedTypedUser `json:"results,omitempty"`
}

// ServiceDefInfo defines model for ServiceDefInfo.
type ServiceDefInfo struct {
	RefLink            *string   `json:"refLink,omitempty"`
	ServiceDisplayName *string   `json:"serviceDisplayName,omitempty"`
	ServiceName        *string   `json:"serviceName,omitempty"`
	ServiceRoles       *[]string `json:"serviceRoles,omitempty"`
}

// ServiceDefinitionOrgResponse The list of results.
type ServiceDefinitionOrgResponse struct {
	DisplayName *string            `json:"displayName,omitempty"`
	Metadata    *map[string]string `json:"metadata,omitempty"`
	Name        *string            `json:"name,omitempty"`
	OrgId       *string            `json:"orgId,omitempty"`
	ParentOrgId *string            `json:"parentOrgId,omitempty"`
}

// ServiceDefinitionResponse The list of results.
type ServiceDefinitionResponse struct {
	DescriptionLong   *string                `json:"descriptionLong,omitempty"`
	DisplayName       string                 `json:"displayName"`
	DocumentSelfLink  *string                `json:"documentSelfLink,omitempty"`
	HealthCheckURL    *string                `json:"healthCheckURL,omitempty"`
	IsBeta            *bool                  `json:"isBeta,omitempty"`
	IsGated           *bool                  `json:"isGated,omitempty"`
	IsPrimary         *bool                  `json:"isPrimary,omitempty"`
	Name              string                 `json:"name"`
	OrganizationLink  *string                `json:"organizationLink,omitempty"`
	ServiceIcon       *string                `json:"serviceIcon,omitempty"`
	ServiceNavBarIcon *string                `json:"serviceNavBarIcon,omitempty"`
	ServiceRoles      *[]ServiceRoleResponse `json:"serviceRoles,omitempty"`
	ServiceUrls       *ServiceUrls           `json:"serviceUrls,omitempty"`
	Visible           *bool                  `json:"visible,omitempty"`
}

// ServiceRoleBinding Roles to remove
type ServiceRoleBinding struct {
	// ExpiresAt The timestamp the role expires at (measured in number of seconds since 1/1/1970 UTC). The property is ignored by the identity service.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Id The identifier of the role.
	Id *string `json:"id,omitempty"`

	// MembershipType Membership type of the member in the organization.
	// DIRECT: if the member roles were assigned directly.
	// GROUP: if the member roles were assigned through enterprise group.
	MembershipType *ServiceRoleBindingMembershipType `json:"membershipType,omitempty"`

	// Name The name of the role.
	Name *string `json:"name,omitempty"`

	// Resource Identity does not support resource scoped permissions. The resource parameter is ignored.
	Resource *string `json:"resource,omitempty"`
}

// ServiceRoleBindingMembershipType Membership type of the member in the organization.
// DIRECT: if the member roles were assigned directly.
// GROUP: if the member roles were assigned through enterprise group.
type ServiceRoleBindingMembershipType string

// ServiceRoleBindingWithGroups The service roles
type ServiceRoleBindingWithGroups struct {
	// ExpiresAt The timestamp the role expires at (measured in number of seconds since 1/1/1970 UTC). The property is ignored by the identity service.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// GroupIds List of group unique identifiers related to role.
	GroupIds *[]string `json:"groupIds,omitempty"`

	// Groups List of group objects related to role.
	Groups *[]Group `json:"groups,omitempty"`

	// Id The identifier of the role.
	Id *string `json:"id,omitempty"`

	// MembershipType Membership type of the member in the organization.
	// DIRECT: if the member roles were assigned directly.
	// GROUP: if the member roles were assigned through enterprise group.
	MembershipType *ServiceRoleBindingWithGroupsMembershipType `json:"membershipType,omitempty"`

	// Name The name of the role.
	Name *string `json:"name,omitempty"`

	// Resource Identity does not support resource scoped permissions. The resource parameter is ignored.
	Resource *string `json:"resource,omitempty"`
}

// ServiceRoleBindingWithGroupsMembershipType Membership type of the member in the organization.
// DIRECT: if the member roles were assigned directly.
// GROUP: if the member roles were assigned through enterprise group.
type ServiceRoleBindingWithGroupsMembershipType string

// ServiceRoleNames defines model for ServiceRoleNames.
type ServiceRoleNames struct {
	ServiceDefinitionId *string   `json:"serviceDefinitionId,omitempty"`
	ServiceRoleNames    *[]string `json:"serviceRoleNames,omitempty"`
}

// ServiceRoleResponse defines model for ServiceRoleResponse.
type ServiceRoleResponse struct {
	Default     *bool   `json:"default,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	IsHidden    *bool   `json:"isHidden,omitempty"`
	Name        *string `json:"name,omitempty"`

	// ServiceDefinition The list of results.
	ServiceDefinition     *ServiceDefinitionResponse `json:"serviceDefinition,omitempty"`
	ServiceDefinitionLink *string                    `json:"serviceDefinitionLink,omitempty"`
}

// ServiceRolesWithGroupsCollection defines model for ServiceRolesWithGroupsCollection.
type ServiceRolesWithGroupsCollection struct {
	// ServiceDefinitionId The service definition id (without "external" prefix
	ServiceDefinitionId string `json:"serviceDefinitionId"`

	// ServiceRoles The service roles
	ServiceRoles *[]ServiceRoleBindingWithGroups `json:"serviceRoles,omitempty"`
}

// ServiceScope For CSP compatibility, ignored by the Identity Service.
type ServiceScope struct {
	// Name For CSP compatibility, ignored by the Identity Service.
	Name *string `json:"name,omitempty"`

	// Resource For CSP compatibility, ignored by the Identity Service.
	Resource *string `json:"resource,omitempty"`
}

// ServiceScopes Service roles to be granted.
type ServiceScopes struct {
	// AllRoles For CSP compatibility, ignored by the Identity Service.
	AllRoles *bool `json:"allRoles,omitempty"`

	// RoleNames List of role role/service role names to add.
	RoleNames *[]string `json:"roleNames,omitempty"`

	// Roles For CSP compatibility, ignored by the Identity Service.
	Roles *[]ServiceScope `json:"roles,omitempty"`

	// ServiceDefinitionId Service definition ID.
	ServiceDefinitionId *string `json:"serviceDefinitionId,omitempty"`
}

// ServiceUrls defines model for ServiceUrls.
type ServiceUrls struct {
	OfferConfiguration *string `json:"offerConfiguration,omitempty"`
	RequestAccess      *string `json:"requestAccess,omitempty"`
	ServiceHome        *string `json:"serviceHome,omitempty"`
}

// Token defines model for Token.
type Token struct {
	// CspAuthToken The access token.
	CspAuthToken *string `json:"cspAuthToken,omitempty"`
}

// UpdateGroupRolesRequest The group roles to be updated.
type UpdateGroupRolesRequest struct {
	// NotifyUsersInGroups Publish email notification to group members. Ignored by the Identity Service
	NotifyUsersInGroups *bool `json:"notifyUsersInGroups,omitempty"`

	// OrganizationRoles Organization roles to be updated.
	OrganizationRoles *OrgRoleRequest `json:"organizationRoles,omitempty"`

	// ServiceRoles Service roles to be updated.
	ServiceRoles *[]OrgServiceRoleRequest `json:"serviceRoles,omitempty"`
}

// UpdateMemberRolesRequest defines model for UpdateMemberRolesRequest.
type UpdateMemberRolesRequest struct {
	OrganizationRoles *UpdateRolesRequestBaseRoleBinding `json:"organizationRoles,omitempty"`
	ServiceRoles      *[]UpdateServiceRolesRequest       `json:"serviceRoles,omitempty"`
}

// UpdateRolesRequestBaseRoleBinding defines model for UpdateRolesRequestBaseRoleBinding.
type UpdateRolesRequestBaseRoleBinding struct {
	// RoleNamesToAdd Deprecated: Role names to add (use rolesToAdd instead)
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	RoleNamesToAdd *[]string `json:"roleNamesToAdd,omitempty"`

	// RoleNamesToRemove Deprecated: Role names to remove (use rolesToRemove instead)
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	RoleNamesToRemove *[]string `json:"roleNamesToRemove,omitempty"`

	// RolesToAdd Roles to add
	RolesToAdd *[]BaseRoleBinding `json:"rolesToAdd,omitempty"`

	// RolesToRemove Roles to remove
	RolesToRemove *[]BaseRoleBinding `json:"rolesToRemove,omitempty"`
}

// UpdateServiceRolesRequest defines model for UpdateServiceRolesRequest.
type UpdateServiceRolesRequest struct {
	// RoleNamesToAdd Deprecated: Role names to add (use rolesToAdd instead)
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	RoleNamesToAdd *[]string `json:"roleNamesToAdd,omitempty"`

	// RoleNamesToRemove Deprecated: Role names to remove (use rolesToRemove instead)
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	RoleNamesToRemove *[]string `json:"roleNamesToRemove,omitempty"`

	// RolesToAdd Roles to add
	RolesToAdd *[]BaseRoleBinding `json:"rolesToAdd,omitempty"`

	// RolesToRemove Roles to remove
	RolesToRemove       *[]BaseRoleBinding `json:"rolesToRemove,omitempty"`
	ServiceDefinitionId *string            `json:"serviceDefinitionId,omitempty"`
}

// UpdateUserProfileRequest Update user profile request
type UpdateUserProfileRequest struct {
	// DefaultOrgId Currently one user can belong to exactly one organization.
	DefaultOrgId *string `json:"defaultOrgId,omitempty"`

	// Language Preferred user language.
	Language *string `json:"language,omitempty"`

	// Locale Preferred user locale.
	Locale *string `json:"locale,omitempty"`

	// Metadata User's profile metadata.
	Metadata *UserProfileMetadata `json:"metadata,omitempty"`

	// PreferredTheme Preferred user theme.
	PreferredTheme *string `json:"preferredTheme,omitempty"`
}

// UrlResponse defines model for UrlResponse.
type UrlResponse struct {
	// Url The URL to redirect to.
	Url *string `json:"url,omitempty"`
}

// User defines model for User.
type User struct {
	Acct      *string   `json:"acct,omitempty"`
	Email     *string   `json:"email,omitempty"`
	FirstName *string   `json:"firstName,omitempty"`
	Groups    *[]string `json:"groups,omitempty"`
	Id        *string   `json:"id,omitempty"`
	LastName  *string   `json:"lastName,omitempty"`

	// ManagerId CSP user response doesn't contain managerId property.
	ManagerId   *string          `json:"managerId,omitempty"`
	Password    *string          `json:"password,omitempty"`
	RefLink     *string          `json:"refLink,omitempty"`
	UserProfile *LeanUserProfile `json:"userProfile,omitempty"`
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	Username *string `json:"username,omitempty"`
}

// UserByUserIdResponse defines model for UserByUserIdResponse.
type UserByUserIdResponse struct {
	Acct           *string         `json:"acct,omitempty"`
	Email          *string         `json:"email,omitempty"`
	FirstName      *string         `json:"firstName,omitempty"`
	Groups         *[]string       `json:"groups,omitempty"`
	Id             *string         `json:"id,omitempty"`
	IdpUserDetails *IdpUserDetails `json:"idpUserDetails,omitempty"`
	LastName       *string         `json:"lastName,omitempty"`

	// ManagerId CSP user response doesn't contain managerId property.
	ManagerId   *string          `json:"managerId,omitempty"`
	Password    *string          `json:"password,omitempty"`
	RefLink     *string          `json:"refLink,omitempty"`
	UserProfile *LeanUserProfile `json:"userProfile,omitempty"`
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	Username *string `json:"username,omitempty"`
}

// UserDetailsResponse defines model for UserDetailsResponse.
type UserDetailsResponse struct {
	IsVmwareIdUser *bool `json:"isVmwareIdUser,omitempty"`
}

// UserGroupsResponse defines model for UserGroupsResponse.
type UserGroupsResponse struct {
	// Groups User Groups Information
	Groups *[]Group `json:"groups,omitempty"`
}

// UserInfo defines model for UserInfo.
type UserInfo struct {
	User        *User          `json:"user,omitempty"`
	UserOrgInfo *[]UserOrgInfo `json:"userOrgInfo,omitempty"`
}

// UserLocalePreferences defines model for UserLocalePreferences.
type UserLocalePreferences struct {
	Language *string `json:"language,omitempty"`
	Locale   *string `json:"locale,omitempty"`
}

// UserLocaleRequest defines model for UserLocaleRequest.
type UserLocaleRequest struct {
	Language string  `json:"language"`
	Locale   *string `json:"locale,omitempty"`
}

// UserOrgInfo defines model for UserOrgInfo.
type UserOrgInfo struct {
	DisplayName *string           `json:"displayName,omitempty"`
	Name        *string           `json:"name,omitempty"`
	OrgRoles    *[]Role           `json:"orgRoles,omitempty"`
	ServicesDef *[]ServiceDefInfo `json:"servicesDef,omitempty"`
}

// UserProfileMetadata User's profile metadata.
type UserProfileMetadata struct {
	AcknowledgeAccountLinkingMessage *int32 `json:"acknowledgeAccountLinkingMessage,omitempty"`
}

// UserProfileResponse defines model for UserProfileResponse.
type UserProfileResponse struct {
	Acct                *string `json:"acct,omitempty"`
	CreatedAt           *int64  `json:"createdAt,omitempty"`
	CustomerNumber      *string `json:"customerNumber,omitempty"`
	DefaultOrgId        *string `json:"defaultOrgId,omitempty"`
	Email               *string `json:"email,omitempty"`
	IsFederated         *bool   `json:"isFederated,omitempty"`
	Language            *string `json:"language,omitempty"`
	LinkedUserIdAccount *string `json:"linkedUserIdAccount,omitempty"`
	Locale              *string `json:"locale,omitempty"`

	// Metadata User's profile metadata.
	Metadata       *UserProfileMetadata `json:"metadata,omitempty"`
	PreferredTheme *string              `json:"preferredTheme,omitempty"`
	UserId         *string              `json:"userId,omitempty"`
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	Username *string `json:"username,omitempty"`
}

// UserRolePatchResponse defines model for UserRolePatchResponse.
type UserRolePatchResponse struct {
	FailedOrgRolesUsernames      []string `json:"failedOrgRolesUsernames"`
	FailedServicesRolesUsernames []string `json:"failedServicesRolesUsernames"`
	SuccessOrgRolesUsernames     []string `json:"successOrgRolesUsernames"`
	SuccessServiceRolesUsernames []string `json:"successServiceRolesUsernames"`
}

// UserServiceRole defines model for UserServiceRole.
type UserServiceRole struct {
	ServiceDefinitionLink *string               `json:"serviceDefinitionLink,omitempty"`
	ServiceRoleNames      *[]string             `json:"serviceRoleNames,omitempty"`
	ServiceRoles          *[]ServiceRoleBinding `json:"serviceRoles,omitempty"`
}

// UserServiceRoles defines model for UserServiceRoles.
type UserServiceRoles struct {
	ServiceRoles *[]UserServiceRole `json:"serviceRoles,omitempty"`
}

// UserServiceRolesPatchRequest defines model for UserServiceRolesPatchRequest.
type UserServiceRolesPatchRequest struct {
	RoleNamesToAdd    *[]string `json:"roleNamesToAdd,omitempty"`
	RoleNamesToRemove *[]string `json:"roleNamesToRemove,omitempty"`
	ServiceId         *string   `json:"serviceId,omitempty"`
}

// UserServiceRolesUpdateRequest defines model for UserServiceRolesUpdateRequest.
type UserServiceRolesUpdateRequest struct {
	// RoleNamesToAdd Deprecated: Role names to add (use rolesToAdd instead)
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	RoleNamesToAdd *[]string `json:"roleNamesToAdd,omitempty"`

	// RoleNamesToRemove Deprecated: Role names to remove (use rolesToRemove instead)
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	RoleNamesToRemove *[]string `json:"roleNamesToRemove,omitempty"`

	// RolesToAdd Roles to add
	RolesToAdd *[]ServiceRoleBinding `json:"rolesToAdd,omitempty"`

	// RolesToRemove Roles to remove
	RolesToRemove         *[]ServiceRoleBinding `json:"rolesToRemove,omitempty"`
	ServiceDefinitionLink string                `json:"serviceDefinitionLink"`
}

// UserServicesRolesPatchRequest defines model for UserServicesRolesPatchRequest.
type UserServicesRolesPatchRequest struct {
	ServiceRolesPatchRequest *[]UserServiceRolesPatchRequest `json:"serviceRolesPatchRequest,omitempty"`
}

// UserShortInfoResponse defines model for UserShortInfoResponse.
type UserShortInfoResponse struct {
	Email    *string `json:"email,omitempty"`
	Language *string `json:"language,omitempty"`
	Locale   *string `json:"locale,omitempty"`
}

// UserTokenResponse defines model for UserTokenResponse.
type UserTokenResponse struct {
	// Acct The user's account identifier, the acct claim can be a combination of the user's username and domain in URLEncoded(username)@domain format or the user's email or the UPN of the user.
	Acct *string `json:"acct,omitempty"`

	// Context The context in which the token was issued.
	Context *string `json:"context,omitempty"`

	// ContextName The context name in which the token was issued.
	ContextName *string `json:"context_name,omitempty"`

	// Domain The domain the user belongs to.
	Domain *string `json:"domain,omitempty"`

	// Email The user's email.
	Email *string `json:"email,omitempty"`

	// EmailVerified True if the user's e-mail address has been verified; otherwise false.
	EmailVerified *bool `json:"email_verified,omitempty"`

	// FamilyName The user's family name.
	FamilyName *string `json:"family_name,omitempty"`

	// GivenName The user's given name.
	GivenName *string `json:"given_name,omitempty"`

	// GroupIds Identifiers of the groups the user belongs to.
	GroupIds *[]string `json:"group_ids,omitempty"`

	// GroupNames Names of the groups the user belongs to.
	GroupNames *[]string `json:"group_names,omitempty"`

	// Sub The user on behalf of which the token was issued.
	Sub *string `json:"sub,omitempty"`

	// Username The user's username.
	Username *string `json:"username,omitempty"`
}

// UserWithDesiredOrgRole defines model for UserWithDesiredOrgRole.
type UserWithDesiredOrgRole struct {
	OrgRolesUpdateRequest *UpdateRolesRequestBaseRoleBinding `json:"orgRolesUpdateRequest,omitempty"`
	UserName              *string                            `json:"userName,omitempty"`
}

// UsersRolesPatchRequest defines model for UsersRolesPatchRequest.
type UsersRolesPatchRequest struct {
	ServicesRolesPatchRequest *UserServicesRolesPatchRequest `json:"servicesRolesPatchRequest,omitempty"`
	UserList                  []UserWithDesiredOrgRole       `json:"userList"`
}

// GetAccessTokenWithAuthorizationRequestParams defines parameters for GetAccessTokenWithAuthorizationRequest.
type GetAccessTokenWithAuthorizationRequestParams struct {
	Authorization *string `json:"authorization,omitempty"`
}

// LogoutParams defines parameters for Logout.
type LogoutParams struct {
	TheAccessTokenToBeInvalidated *string `json:"The access token to be invalidated.,omitempty"`
}

// GetAccessTokenPkceFlowParams defines parameters for GetAccessTokenPkceFlow.
type GetAccessTokenPkceFlowParams struct {
	// Authorization Basic auth client credentials [Basic Base64_Encode(client_id:client_secret)].<br><strong>Example:</strong> <i>authorization: Basic Y2xpZW50X2lkOmNsaWVudF9zZWNyZXQ=</i><br>Decoding this string will literally return client_id:client_secret.<br><br>Note: when using <strong>Public OAuth clients</strong>, Authorization is required using the format 'Basic Base64_Encode(client_id:)' with empty client_secret.
	Authorization   string  `json:"authorization"`
	IdentitySession *string `form:"identity-session,omitempty" json:"identity-session,omitempty"`
}

// GetPublicKeyParams defines parameters for GetPublicKey.
type GetPublicKeyParams struct {
	ThePublicKeyFormat *GetPublicKeyParamsThePublicKeyFormat `form:"The public key format.,omitempty" json:"The public key format.,omitempty"`
}

// GetPublicKeyParamsThePublicKeyFormat defines parameters for GetPublicKey.
type GetPublicKeyParamsThePublicKeyFormat string

// SearchGroupsParams defines parameters for SearchGroups.
type SearchGroupsParams struct {
	// SearchTerm The search term, uses 'contains' filter on the group displayName attribute.
	SearchTerm string `form:"searchTerm" json:"searchTerm"`

	// IdpId This parameter is included for CSP compatibility and its value is ignored.
	IdpId *string `form:"idpId,omitempty" json:"idpId,omitempty"`

	// PageStart The index of the first element of the page. One based.
	PageStart *int `form:"pageStart,omitempty" json:"pageStart,omitempty"`

	// PageLimit Specifies the maximum results per page for every call.
	PageLimit *int `form:"pageLimit,omitempty" json:"pageLimit,omitempty"`
}

// GetLoggedInUserParams defines parameters for GetLoggedInUser.
type GetLoggedInUserParams struct {
	Expand *bool `form:"expand,omitempty" json:"expand,omitempty"`
}

// GetUserOrgs1Params defines parameters for GetUserOrgs1.
type GetUserOrgs1Params struct {
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`
}

// GetUserOrgServiceRolesParams defines parameters for GetUserOrgServiceRoles.
type GetUserOrgServiceRolesParams struct {
	ServiceDefinitionLink *string `form:"serviceDefinitionLink,omitempty" json:"serviceDefinitionLink,omitempty"`
}

// LoginParams defines parameters for Login.
type LoginParams struct {
	// AccessToken When this parameter is present, the response will contain refresh token.
	AccessToken *string `form:"access_token,omitempty" json:"access_token,omitempty"`
}

// LoginOauthParams defines parameters for LoginOauth.
type LoginOauthParams struct {
	Authorization *string `json:"authorization,omitempty"`
}

// GetOrganizationGroupsParams defines parameters for GetOrganizationGroups.
type GetOrganizationGroupsParams struct {
	// PageStart Specifies the index that the set of results will begin with.
	PageStart *int `form:"pageStart,omitempty" json:"pageStart,omitempty"`

	// PageLimit Specifies the maximum results per page for every call.
	PageLimit *int `form:"pageLimit,omitempty" json:"pageLimit,omitempty"`

	// GroupId Unique identifier of the group.
	GroupId *string `form:"groupId,omitempty" json:"groupId,omitempty"`
}

// SearchOrgGroupsParams defines parameters for SearchOrgGroups.
type SearchOrgGroupsParams struct {
	GroupSearchTerm string `form:"groupSearchTerm" json:"groupSearchTerm"`
}

// GetNestedGroupsFromADGroupParams defines parameters for GetNestedGroupsFromADGroup.
type GetNestedGroupsFromADGroupParams struct {
	// PageStart Specifies the index that the set of results will begin with.
	PageStart *int `form:"pageStart,omitempty" json:"pageStart,omitempty"`

	// PageLimit Specifies the maximum results per page for every call.
	PageLimit *int `form:"pageLimit,omitempty" json:"pageLimit,omitempty"`

	// SearchTerm Search criteria: the string to be searched within the group display name.
	SearchTerm *string `form:"searchTerm,omitempty" json:"searchTerm,omitempty"`
}

// GetPaginatedGroupUsersParams defines parameters for GetPaginatedGroupUsers.
type GetPaginatedGroupUsersParams struct {
	// PageStart Specifies the index that the set of results will begin with.
	PageStart *int `form:"pageStart,omitempty" json:"pageStart,omitempty"`

	// PageLimit Specifies the maximum results per page for every call.
	PageLimit       *int    `form:"pageLimit,omitempty" json:"pageLimit,omitempty"`
	FirstName       *string `form:"firstName,omitempty" json:"firstName,omitempty"`
	LastName        *string `form:"lastName,omitempty" json:"lastName,omitempty"`
	Email           *string `form:"email,omitempty" json:"email,omitempty"`
	OnlyDirectUsers *bool   `form:"onlyDirectUsers,omitempty" json:"onlyDirectUsers,omitempty"`
}

// GetOrgRolesParams defines parameters for GetOrgRoles.
type GetOrgRolesParams struct {
	// Name Role name (or comma separated list of role names
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Expand Indicates if response should be expanded, value is ignored - only existence of parameter is checked
	Expand *bool `form:"expand,omitempty" json:"expand,omitempty"`
}

// GetPaginatedOrgUsersInfo1Params defines parameters for GetPaginatedOrgUsersInfo1.
type GetPaginatedOrgUsersInfo1Params struct {
	// ServiceDefinitionId Service definition id used to filter users having access to the service.
	ServiceDefinitionId *string `form:"serviceDefinitionId,omitempty" json:"serviceDefinitionId,omitempty"`

	// PageStart Specifies the index that the set of results will begin with.
	PageStart *int `form:"pageStart,omitempty" json:"pageStart,omitempty"`

	// PageLimit Specifies the maximum results per page for every call.
	PageLimit *int `form:"pageLimit,omitempty" json:"pageLimit,omitempty"`

	// ExpandProfile Indicates if the response should be expanded with the user profile, the value is ignored, only the existence of parameter is checked.
	ExpandProfile *string `form:"expandProfile,omitempty" json:"expandProfile,omitempty"`

	// IncludeGroupIdsInRoles Indicates if the inherited roles in the response should indicate group information, the value is ignored, only the existence of parameter is checked.
	IncludeGroupIdsInRoles *string `form:"includeGroupIdsInRoles,omitempty" json:"includeGroupIdsInRoles,omitempty"`
}

// SearchUsersParams defines parameters for SearchUsers.
type SearchUsersParams struct {
	// UserSearchTerm The string to be searched within firstName, lastName, username or email.
	UserSearchTerm string `form:"userSearchTerm" json:"userSearchTerm"`

	// ExpandProfile Indicates if the response should be expanded with the user profile, the value is ignored, only the existence of parameter is checked.
	ExpandProfile *string `form:"expandProfile,omitempty" json:"expandProfile,omitempty"`

	// IncludeGroupIdsInRoles Indicates if the inherited roles in the response should indicate group information, the value is ignored, only the existence of parameter is checked.
	IncludeGroupIdsInRoles *string `form:"includeGroupIdsInRoles,omitempty" json:"includeGroupIdsInRoles,omitempty"`
}

// GetAccessTokenInfoParams defines parameters for GetAccessTokenInfo.
type GetAccessTokenInfoParams struct {
	Authorization string `json:"Authorization"`
}

// GetUserInAnyOrganization1Params defines parameters for GetUserInAnyOrganization1.
type GetUserInAnyOrganization1Params struct {
	ExpandProfile *string `form:"expandProfile,omitempty" json:"expandProfile,omitempty"`
}

// GetUserServiceRolesInOrganization1Params defines parameters for GetUserServiceRolesInOrganization1.
type GetUserServiceRolesInOrganization1Params struct {
	ServiceDefinitionLink *string `form:"serviceDefinitionLink,omitempty" json:"serviceDefinitionLink,omitempty"`
}

// GetUserOrgsParams defines parameters for GetUserOrgs.
type GetUserOrgsParams struct {
	// PageStart Specifies the index that the set of results will begin with.
	PageStart *int `form:"pageStart,omitempty" json:"pageStart,omitempty"`

	// PageLimit Specifies the maximum results per page for every call.
	PageLimit *int `form:"pageLimit,omitempty" json:"pageLimit,omitempty"`
}

// GetPaginatedOrgUsersInfoParams defines parameters for GetPaginatedOrgUsersInfo.
type GetPaginatedOrgUsersInfoParams struct {
	// ServiceDefinitionId Service definition id used to filter users having access to the service.
	ServiceDefinitionId *string `form:"serviceDefinitionId,omitempty" json:"serviceDefinitionId,omitempty"`

	// PageStart Specifies the index that the set of results will begin with.
	PageStart *int `form:"pageStart,omitempty" json:"pageStart,omitempty"`

	// PageLimit Specifies the maximum results per page for every call.
	PageLimit *int `form:"pageLimit,omitempty" json:"pageLimit,omitempty"`

	// ExpandProfile Indicates if the response should be expanded with the user profile, the value is ignored, only the existence of parameter is checked.
	ExpandProfile *string `form:"expandProfile,omitempty" json:"expandProfile,omitempty"`

	// IncludeGroupIdsInRoles Indicates if the inherited roles in the response should indicate group information, the value is ignored, only the existence of parameter is checked.
	IncludeGroupIdsInRoles *string `form:"includeGroupIdsInRoles,omitempty" json:"includeGroupIdsInRoles,omitempty"`
}

// GetUserInAnyOrganizationParams defines parameters for GetUserInAnyOrganization.
type GetUserInAnyOrganizationParams struct {
	ExpandProfile *string `form:"expandProfile,omitempty" json:"expandProfile,omitempty"`
}

// GetUserServiceRolesInOrganizationParams defines parameters for GetUserServiceRolesInOrganization.
type GetUserServiceRolesInOrganizationParams struct {
	ServiceDefinitionLink *string `form:"serviceDefinitionLink,omitempty" json:"serviceDefinitionLink,omitempty"`
}

// GetAllServiceDefinitionsParams defines parameters for GetAllServiceDefinitions.
type GetAllServiceDefinitionsParams struct {
	OrgLink *string `form:"orgLink,omitempty" json:"orgLink,omitempty"`
	Expand  *string `form:"expand,omitempty" json:"expand,omitempty"`
}

// GetAllByOrgServiceDefinitions1Params defines parameters for GetAllByOrgServiceDefinitions1.
type GetAllByOrgServiceDefinitions1Params struct {
	ExcludeUngated *bool   `form:"excludeUngated,omitempty" json:"excludeUngated,omitempty"`
	Locale         *string `form:"locale,omitempty" json:"locale,omitempty"`
	PageStart      *int32  `form:"pageStart,omitempty" json:"pageStart,omitempty"`
	PageLimit      *int32  `form:"pageLimit,omitempty" json:"pageLimit,omitempty"`
}

// GetPagedServiceDefinitionOrgsParams defines parameters for GetPagedServiceDefinitionOrgs.
type GetPagedServiceDefinitionOrgsParams struct {
	PageStart *int32 `form:"pageStart,omitempty" json:"pageStart,omitempty"`
	PageLimit *int32 `form:"pageLimit,omitempty" json:"pageLimit,omitempty"`
}

// GetAllByOrgServiceDefinitionsParams defines parameters for GetAllByOrgServiceDefinitions.
type GetAllByOrgServiceDefinitionsParams struct {
	ExcludeUngated *bool   `form:"excludeUngated,omitempty" json:"excludeUngated,omitempty"`
	Locale         *string `form:"locale,omitempty" json:"locale,omitempty"`
	PageStart      *int32  `form:"pageStart,omitempty" json:"pageStart,omitempty"`
	PageLimit      *int32  `form:"pageLimit,omitempty" json:"pageLimit,omitempty"`
}

// CheckIDTokenParams defines parameters for CheckIDToken.
type CheckIDTokenParams struct {
	// Authorization ID token in Bearer Authentication format i.e. 'Bearer XXX' where XXX is the content of an ID token
	Authorization string `json:"Authorization"`
}

// GetAccessTokenWithRefreshTokenJSONRequestBody defines body for GetAccessTokenWithRefreshToken for application/json ContentType.
type GetAccessTokenWithRefreshTokenJSONRequestBody = AuthorizationByRefreshTokenRequest

// GetAccessTokenWithAuthorizationRequestJSONRequestBody defines body for GetAccessTokenWithAuthorizationRequest for application/json ContentType.
type GetAccessTokenWithAuthorizationRequestJSONRequestBody = AuthorizationRequest

// LogoutJSONRequestBody defines body for Logout for application/json ContentType.
type LogoutJSONRequestBody = IdTokenRequest

// GetAccessTokenPkceFlowFormdataRequestBody defines body for GetAccessTokenPkceFlow for application/x-www-form-urlencoded ContentType.
type GetAccessTokenPkceFlowFormdataRequestBody = PkceFlowAuthorizationRequest

// UpdateUserProfileJSONRequestBody defines body for UpdateUserProfile for application/json ContentType.
type UpdateUserProfileJSONRequestBody = UpdateUserProfileRequest

// UpdateUserPreferencesJSONRequestBody defines body for UpdateUserPreferences for application/json ContentType.
type UpdateUserPreferencesJSONRequestBody = UserLocaleRequest

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// LoginOauthJSONRequestBody defines body for LoginOauth for application/json ContentType.
type LoginOauthJSONRequestBody = AuthorizationRequest

// PatchOrgJSONRequestBody defines body for PatchOrg for application/json ContentType.
type PatchOrgJSONRequestBody = OrganizationResponse

// RemoveGroupsFromOrganizationJSONRequestBody defines body for RemoveGroupsFromOrganization for application/json ContentType.
type RemoveGroupsFromOrganizationJSONRequestBody = RemoveGroupsFromOrgRequest

// UpdateGroupRolesOnOrganizationJSONRequestBody defines body for UpdateGroupRolesOnOrganization for application/json ContentType.
type UpdateGroupRolesOnOrganizationJSONRequestBody = UpdateGroupRolesRequest

// DeleteOrgScopedOAuthClientJSONRequestBody defines body for DeleteOrgScopedOAuthClient for application/json ContentType.
type DeleteOrgScopedOAuthClientJSONRequestBody = DeleteClientsRequest

// CreateOrgScopedOAuthClientJSONRequestBody defines body for CreateOrgScopedOAuthClient for application/json ContentType.
type CreateOrgScopedOAuthClientJSONRequestBody = OrgOAuthAppRequest

// PatchOrgRolesJSONRequestBody defines body for PatchOrgRoles for application/json ContentType.
type PatchOrgRolesJSONRequestBody = UsersRolesPatchRequest

// PatchUserRolesInOrganizationJSONRequestBody defines body for PatchUserRolesInOrganization for application/json ContentType.
type PatchUserRolesInOrganizationJSONRequestBody = UpdateRolesRequestBaseRoleBinding

// PatchUserServiceRolesInOrganizationJSONRequestBody defines body for PatchUserServiceRolesInOrganization for application/json ContentType.
type PatchUserServiceRolesInOrganizationJSONRequestBody = UserServiceRolesUpdateRequest

// PatchUserRolesOnOrganizationJSONRequestBody defines body for PatchUserRolesOnOrganization for application/json ContentType.
type PatchUserRolesOnOrganizationJSONRequestBody = UpdateMemberRolesRequest
